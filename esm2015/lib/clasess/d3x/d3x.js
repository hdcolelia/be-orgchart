import { max, min } from 'd3';
import * as fa from '@fortawesome/free-solid-svg-icons';
export const applyAttrs = (sel, attrs) => {
    // applying  attrs
    let currentSel = sel;
    for (const key in attrs) {
        const value = attrs[key];
        currentSel = currentSel.attr(key, value);
    }
    return currentSel;
};
export const addDefs = (container, defs) => {
    // adding defs
    for (const key in defs) {
        const currentDef = defs[key];
        const pattern = applyAttrs(container.append(currentDef.type).attr('id', key), currentDef.attrs);
        for (const componentKey in currentDef.components) {
            const componentDef = currentDef.components[componentKey];
            const component = applyAttrs(pattern.append(componentDef.type), componentDef.attrs);
            if (componentDef.components)
                addDefs(component, componentDef.components);
        }
    }
};
export const calcIconGTransform = (prIcon, prScale) => {
    //defining variables
    let traslateX = 0;
    let traslateY = 0;
    let scale = 1;
    prScale = prScale || 1;
    const iconWidth = +prIcon.icon[0];
    const iconHeight = +prIcon.icon[1];
    if ((iconWidth > iconHeight) || (iconWidth == iconHeight)) { // if width > height or equal
        scale = (1 / iconWidth);
        const margin = (iconWidth - iconHeight) / 2;
        traslateY = margin * scale;
        if (prScale != 1) {
            traslateY += ((iconHeight * scale) - (iconHeight * scale * prScale)) / 2;
            traslateX = (1 - prScale) / 2;
        }
    }
    else {
        scale = (1 / iconHeight);
        const margin = (iconHeight - iconWidth) / 2;
        traslateX = margin * scale;
        if (prScale != 1) {
            traslateX += ((iconWidth * scale) - (iconWidth * scale * prScale)) / 2;
            traslateY = (1 - prScale) / 2;
        }
    }
    return `translate(${traslateX}, ${traslateY}) scale(${scale * prScale})`;
};
export const calcGFit = (prG, prContainer, prRoot, prNodeParser, prPadding = 50) => {
    //defining variables
    const cWidth = prContainer.node().getBoundingClientRect().width;
    const cHeight = prContainer.node().getBoundingClientRect().height;
    const gWidth = prG.node().getBBox().width; // adding margin
    const gHeight = prG.node().getBBox().height; // adding margin
    const scale = min([(cHeight / (gHeight + prPadding)), (cWidth / (gWidth + prPadding))]);
    const minX = Math.abs(min(prRoot.descendants().map(current => current.x)) - (prNodeParser.width / 2));
    const maxX = max(prRoot.descendants().map(current => current.x)) + (prNodeParser.width / 2);
    const centerX = cWidth / 2;
    const currentx = centerX + (((minX - maxX) * scale) / 2);
    const currenty = ((cHeight - (gHeight * scale)) / 2);
    // console.log(`Min X: ${minX} - Max X: ${maxX} - diff: ${minX - maxX} - center: ${currentx} - g sclae: ${gScale}`)
    return { scale: scale, y: currenty, x: currentx };
};
export const addDefaultDefs = (container, defs, prNodeParser) => {
    // adding defs
    for (const key in defs) {
        const currentDef = defs[key];
        // creating pattern
        const pattern = container.append('pattern');
        setPattern(pattern, { nodeId: key, nodeImage: currentDef }, prNodeParser);
    }
};
export const addFaIconDefs = (container, defs) => {
    // adding defs
    for (const key in defs) {
        const currentDef = defs[key];
        currentDef.scale = currentDef.scale || 1;
        // creating pattern
        const pattern = applyAttrs(container.append('pattern').attr('id', key), {
            width: '100%', height: '100%', patternContentUnits: 'objectBoundingBox'
        });
        // creating rect
        const faIcon = fa[currentDef.name];
        // creating g
        const g = applyAttrs(pattern.append('g'), {
            transform: calcIconGTransform(faIcon, currentDef.scale),
            fill: currentDef.color
        });
        const sideSize = max([+faIcon.icon[0], +faIcon.icon[1]]) / currentDef.scale;
        applyAttrs(g.append('rect'), {
            fill: currentDef.backgroundColor,
            x: -sideSize / 3,
            y: -sideSize / 3,
            width: (sideSize * 3),
            height: (sideSize * 3)
        });
        // creating path
        applyAttrs(g.append('path'), {
            d: faIcon.icon[4]
        });
    }
};
const imageLink = (nodeImage) => {
    if (nodeImage && nodeImage.type == 'link')
        return nodeImage.data;
    if (nodeImage && nodeImage.type == 'base64')
        return `data:image/png;base64,${nodeImage.data}`;
    return '';
};
const ɵ0 = imageLink;
const faIcon = (d) => {
    if (!d || !(d.type == 'icon'))
        return null;
    const icon = fa[d.name];
    return icon;
};
const ɵ1 = faIcon;
export const setPattern = (prPattern, prNodeData, prNodeParser) => {
    // configurin pattern
    const link = imageLink(prNodeData.nodeImage);
    if (link != '') {
        prPattern
            .attr('id', `img-${prNodeData.nodeId}`)
            .attr('width', 1)
            .attr('height', 1)
            .append('image')
            .attr('xlink:href', link)
            .attr('width', prNodeParser.imageDefs.w)
            .attr('height', prNodeParser.imageDefs.h)
            .attr('preserveAspectRatio', 'xMidYMin slice');
        return; // exit because image is priority
    }
    const icon = faIcon(prNodeData.nodeImage);
    if (icon) {
        const iconDef = prNodeData.nodeImage;
        applyAttrs(prPattern, {
            id: `img-${prNodeData.nodeId}`,
            width: '100%',
            height: '100%',
            patternContentUnits: 'objectBoundingBox'
        });
        // creating g
        const g = applyAttrs(prPattern.append('g'), {
            transform: calcIconGTransform(icon, iconDef.scale || 0.8),
            fill: iconDef.color || 'white'
        });
        // creating rect
        const sideSize = max([+icon.icon[0], +icon.icon[1]]);
        applyAttrs(g.append('rect'), {
            fill: iconDef.backgroundColor || '#074EF3',
            x: -sideSize / 2,
            y: -sideSize / 2,
            width: (sideSize * 2),
            height: (sideSize * 2)
        });
        // creating path
        applyAttrs(g.append('path'), {
            d: icon.icon[4]
        });
        return; // exit because icon is second priority
    }
};
export const lastChidrenLevel = (prRoot) => {
    for (const current of prRoot.children) {
        if (current.children)
            return false;
    }
    return true;
};
export const buildTree = (prRoot, nodeSize) => {
    if (!prRoot.children || !prRoot.children.length)
        return;
    //#region local Functions
    const setChildrenPos = (prNode, nodeSize) => {
        prNode.minx = prNode.x;
        prNode.maxx = prNode.x;
        if (!prNode.children)
            return;
        let startingX = prNode.x - ((prNode.children.length - 1) / 2) * nodeSize.w;
        prNode.minx = startingX;
        const lastLevel = lastChidrenLevel(prNode);
        let distribution = prNode.data.childrenDist;
        if (!lastLevel)
            distribution = "horizontal";
        switch (distribution) {
            case "vertical":
                startingX = prNode.x - nodeSize.w / 2;
                prNode.minx = startingX;
                prNode.maxx = startingX + nodeSize.w;
                let level = 0;
                for (let index = 0; index < prNode.children.length; index++) {
                    const currentChild = prNode.children[index];
                    currentChild.x = startingX;
                    startingX += nodeSize.w;
                    currentChild.linkDirection = 'right';
                    currentChild.y = (currentChild.depth + level) * nodeSize.h;
                    if (index % 2 == 1) {
                        currentChild.linkDirection = 'left';
                        startingX = prNode.x - nodeSize.w / 2;
                        level++;
                    }
                }
                break;
            case "horizontal":
            default:
                for (const currentChild of prNode.children || []) {
                    currentChild.x = startingX;
                    prNode.maxx = startingX;
                    startingX += nodeSize.w;
                    currentChild.linkDirection = 'top';
                    currentChild.y = currentChild.depth * nodeSize.h;
                    setChildrenPos(currentChild, nodeSize);
                }
                break;
        }
    };
    const moveNode = (prNode, movex, positionOnParent, moveBrothers) => {
        if (movex == 0)
            return;
        prNode.minx += movex;
        prNode.maxx += movex;
        prNode.x += movex;
        // console.log('Moving: ', prNode.data.nodeId, movex)
        // if(!prNode.children) return;
        for (let index = 0; index < (prNode.children || []).length; index++) {
            const currentChild = prNode.children[index];
            // currentChild.x += movex;
            moveNode(currentChild, movex, index, false);
        }
        // moving brothers
        if (!moveBrothers)
            return;
        if (!prNode.parent)
            return;
        const nextToMove = prNode.parent.children[positionOnParent + 1];
        if (nextToMove)
            moveNode(nextToMove, movex, positionOnParent + 1, true);
    };
    //#endregion local Functions
    // setting the first x / y position
    setChildrenPos(prRoot, nodeSize);
    const getrelativePosition = (current, length) => {
        const increment = 1 / length;
        const pos = increment * current;
        if (increment == 1)
            return 0; // middle
        if (pos == 1)
            return 1; // middle
        if (pos <= 0.5)
            return -1; // left
        const prevPos = increment - (current - 1); // left
        if (pos >= 0.5 && prevPos <= 0.5)
            return 0; // middle
        return 1; // right    
    };
    const getNextNodeWithChildren = (prNode, positionOnParent) => {
        for (let index = positionOnParent; index < prNode.parent.children.length; index++) {
            const child = prNode.parent.children[index];
            if (child.children)
                return {
                    index: index,
                    node: child
                };
        }
        return {
            index: -1,
            node: null
        };
    };
    //analizamos las posiciones y corremos de ser necesario
    let lastX = { defined: false, x: 0 };
    for (let index = 0; index < prRoot.children.length; index++) {
        const currentChild = prRoot.children[index];
        if (currentChild.children) {
            // before anything
            buildTree(currentChild, nodeSize);
            if (!lastX.defined || currentChild.maxx > lastX.x) {
                lastX.defined = true;
                lastX.x = currentChild.maxx;
            }
            const position = getrelativePosition(index + 1, prRoot.children.length);
            // to the left
            const nextChild = getNextNodeWithChildren(currentChild, index + 1); //prRoot.children[index+1];
            if (!nextChild.node)
                continue;
            let move;
            if (nextChild.node.minx < (lastX.x + nodeSize.w)) {
                move = (lastX.x + nodeSize.w) - nextChild.node.minx;
                // console.log(`NODE: ${currentChild.data.nodeId} -> ${move}`)
                moveNode(nextChild.node, move, nextChild.index, true);
            }
            // // let prevChild: IRootNode<ID3Node>, nextChild: IRootNode<ID3Node>;
            // switch(position) {
            //   case -1: // left
            //     prevChild = prRoot.children[index-1];
            //     if(!prevChild || !prevChild.children) continue;
            //     move = (Math.abs(currentChild.minx - prevChild.maxx) + nodeSize.w) * -1; 
            //     moveNode(prevChild, move, index-1, true)   
            //     break;
            //   case 0: // center
            //     prevChild = prRoot.children[index-1];
            //     if(prevChild && prevChild.children) {
            //       move = (Math.abs(currentChild.minx - prevChild.maxx) + nodeSize.w) * -1; 
            //       moveNode(prevChild, move, index-1, true)   
            //     }
            //     nextChild = prRoot.children[index+1];
            //     if(!nextChild || !nextChild.children) continue;
            //     move = (Math.abs(nextChild.minx - currentChild.maxx) + nodeSize.w); 
            //     moveNode(nextChild, move, index+1, true)
            //     break;
            //   case 1: // rigth
            //     nextChild =  getBrotherWithChildren(currentChild, index, 1); //prRoot.children[index+1];
            //     if(!nextChild || !nextChild.children) continue;
            //     move = (Math.abs(nextChild.minx - currentChild.maxx) + nodeSize.w); 
            //     moveNode(nextChild, move, index+1, true)
            //     break;
            // }
            // buildTree(currentChild, nodeSize)
        }
    }
    // if root then put root in the middle
    if (!prRoot.parent) {
        const nodes = [];
        const getNodes = (prNode) => {
            nodes.push(prNode);
            for (const currentNode of prNode.children || []) {
                getNodes(currentNode);
            }
        };
        getNodes(prRoot);
        const minX = min(nodes.map(current => current.x));
        const maxX = max(nodes.map(current => current.x));
        const moveX = (Math.abs(minX) - Math.abs(maxX)) / 2;
        //console.log('Centranding...: ', moveX);
        moveNode(prRoot.children[0], moveX, 0, true);
    }
};
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,