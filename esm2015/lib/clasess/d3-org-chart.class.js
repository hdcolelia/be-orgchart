//#region 
// Desarrollado en base a: 
//  https://bl.ocks.org/bumbeishvili/09a03b81ae788d2d14f750afe59eb7de
//  https://github.com/bumbeishvili/d3-organization-chart
//#endregion
import * as d3 from 'd3';
import { Subject, fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { NodeItemParser } from './../components/@items/basic/item-basic';
export class D3OrgChart {
    constructor(prContainer, prOptions) {
        var _a, _b;
        //#region Default Options
        this.options = {
            backgroundColor: '#03A3C5',
            nodeParser: new NodeItemParser(),
            data: [],
            defaultFont: 'Tahoma'
        };
        this._data = [];
        //#endregion
        this.currentZoom = 1;
        this._nodeSize = {
            width: 250,
            height: 200
        };
        //#region Events
        // node click
        this.onNodeClick = new Subject();
        const me = this;
        // init container
        me.container = d3.select(prContainer);
        //If Data argument passed - then set it
        if ((_a = prOptions) === null || _a === void 0 ? void 0 : _a.data)
            me._data = prOptions.data;
        // setting parser
        me._nodeParser = ((_b = prOptions) === null || _b === void 0 ? void 0 : _b.nodeParser) || me.options.nodeParser;
        // applying options
        me.options = Object.assign(me.options, prOptions);
        // monitor resize
        fromEvent(window, 'resize')
            .pipe(debounceTime(300)).subscribe(() => {
            // HDC - VER this.prepareCanvas();
            this.render();
        });
    }
    get data() {
        return this._data || [];
    }
    set data(data) {
        this._data = data;
        // this.render()
    }
    get nodeParser() {
        return this._nodeParser;
    }
    set nodeParser(parser) {
        this._nodeParser = parser;
        // this.render();
    }
    get nodeSize() {
        return this._nodeSize;
    }
    set nodeSize(prSize) {
        this._nodeSize = prSize;
    }
    render() {
        const me = this;
        // preparing svg
        me.prepareCanvas();
        // if no data then return
        if (!me.data.length)
            return;
        // preparing data
        me.prepareData();
        // showing nodes
        me.showNodes();
        return this;
    }
    // preparing canvas
    prepareCanvas() {
        const me = this;
        //Drawing containers
        const containerRect = me.container.node().getBoundingClientRect();
        me.svg = me.container.selectAll('svg')
            .data([{ id: 'svg' }], (d) => d.id)
            .join(enter => enter
            .append('svg')
            .attr('class', 'svg-chart-container')
            .attr('font-family', me.options.defaultFont)
            .call(d3.zoom().on("zoom", d => this.zoomed()))
            .attr('cursor', 'move')
            .style('background-color', me.options.backgroundColor), update => update
            .attr('width', containerRect.width)
            .attr('height', containerRect.height));
        //Add container g element
        me.chart = me.svg.selectAll('g.chart')
            .data([{ id: 'chart' }], (d) => d.id)
            .join(enter => enter
            .append('g')
            .attr('class', 'chart')
            .attr('transform', `translate(0,0)`), update => update);
        // Add one more container g element, for better positioning controls
        me.centerG = me.chart.selectAll('g.center-group')
            .data([{ id: 'center-group' }], (d) => d.id)
            .join(enter => enter.append('g')
            .attr('class', 'center-group'), update => update
            .attr('transform', `translate(${containerRect.width / 2},${this._nodeSize.height}) scale(${this.currentZoom})`));
    }
    // preparing data
    prepareData() {
        const me = this;
        // if no data return 
        if (!me.data.length)
            return;
        // Convert flat data to hierarchical
        me.root = d3.stratify()
            .id(({ nodeId }) => nodeId)
            .parentId(({ parentNodeId }) => parentNodeId)(me.data);
        // preparing treemap
        const containerRect = me.container.node().getBoundingClientRect();
        me.treemap = d3.tree().size([containerRect.width || 250, containerRect.height])
            .nodeSize([this._nodeSize.width + 100, this._nodeSize.height + 100]);
        me.allNodes = me.treemap(me.root).descendants();
    }
    // showing nodes
    showNodes() {
        const me = this;
        //  Assigns the x and y position for the nodes
        const treeData = me.treemap(me.root);
        // select nodes from center group
        // it is necesary for scope 
        const drawNodes = (container, nodes) => me.nodeParser.drawNodes(container, nodes);
        const nodes = treeData.descendants()
            .filter(current => !current.parent
            || current.parent.data.expanded);
        // rendering nodes
        const nodeStartPosition = (d) => {
            if (!d.parent)
                return `translate(${d.x - (me.nodeParser.width / 2)},${d.y})`;
            return `translate(${d.parent.x - (me.nodeParser.width / 2)},${d.parent.y})`;
        };
        const nodePosition = (d) => `translate(${d.x - (me.nodeParser.width / 2)},${d.y})`;
        me.centerG.selectAll('g.node')
            .data(nodes, (d) => d.data.nodeId)
            .join(enter => enter
            .append('g')
            .attr('class', 'node')
            .attr('transform', nodeStartPosition)
            .call(drawNodes, nodes)
            .on('click', (node) => {
            me.expand(node);
            me.onNodeClick.next({ id: node.data.nodeId, node: node.data });
        }), update => update, exit => exit
            .transition()
            .duration(600)
            .attr('transform', nodeStartPosition)
            .style("opacity", 0)
            .remove())
            .transition().duration(600)
            .attr('transform', nodePosition);
        // rendering links
        const pathStartingDiagonal = (d) => {
            const target = { x: d.parent.x, y: d.parent.y + me.nodeParser.height };
            return this.diagonal(target, target);
        };
        const pathDiagonal = (d) => {
            const target = { x: d.parent.x, y: d.parent.y + me.nodeParser.height };
            return this.diagonal(d, target);
        };
        me.centerG.selectAll('path.link')
            .data(nodes.slice(1), (d) => d.data.nodeId)
            .join(enter => enter
            .insert('path', 'g')
            .attr('class', 'link')
            .attr('fill', 'none')
            .attr('stroke', 'blue')
            .attr('stroke-width', 2)
            .attr('d', pathStartingDiagonal), update => update, exit => exit
            .transition().duration(600)
            .attr('d', pathStartingDiagonal)
            .remove())
            .transition().duration(600)
            .attr('d', pathDiagonal);
    }
    // Zoom handler function
    zoomed() {
        const me = this;
        // Saving d3 event's transform object
        me.lastTransform = d3.event.transform;
        // Reposition and rescale chart accordingly
        me.chart.attr('transform', me.lastTransform);
    }
    _onNodeClick(nodeId, node) {
        this.onNodeClick.next({ id: nodeId, node: node });
    }
    //#endregion
    //drawNode(prNode: d3.HierarchyPointNode<ID3Node>) {
    //  const me = this;
    //  me.nodeParser.draw(me.centerG, prNode);
    //}
    // Generate custom diagonal - play with it here - https://observablehq.com/@bumbeishvili/curved-edges?collection=@bumbeishvili/work-components
    diagonal(s, t) {
        // Calculate some variables based on source and target (s,t) coordinates
        const x = s.x;
        const y = s.y;
        const ex = t.x;
        const ey = t.y;
        let xrvs = ex - x < 0 ? -1 : 1;
        let yrvs = ey - y < 0 ? -1 : 1;
        let rdef = 35;
        let rInitial = Math.abs(ex - x) / 2 < rdef ? Math.abs(ex - x) / 2 : rdef;
        let r = Math.abs(ey - y) / 2 < rInitial ? Math.abs(ey - y) / 2 : rInitial;
        let h = Math.abs(ey - y) / 2 - r;
        let w = Math.abs(ex - x) - r * 2;
        // Build the path
        const path = `
            M ${x} ${y}
            L ${x} ${y + h * yrvs}
            C  ${x} ${y + h * yrvs + r * yrvs} ${x} ${y + h * yrvs + r * yrvs} ${x + r * xrvs} ${y + h * yrvs + r * yrvs}
            L ${x + w * xrvs + r * xrvs} ${y + h * yrvs + r * yrvs}
            C ${ex}  ${y + h * yrvs + r * yrvs} ${ex}  ${y + h * yrvs + r * yrvs} ${ex} ${ey - h * yrvs}
            L ${ex} ${ey}
          `;
        // Return result
        return path;
    }
    expand(node) {
        const me = this;
        const expanded = node.data.expanded;
        node.data.expanded = !expanded;
        const expand = (children, expanded) => {
            (children || [])
                .forEach(current => {
                current.data.hidden = !expanded;
                expand(current.children, expanded);
            });
        };
        expand(node.children, expanded);
        me.render();
    }
}
//# sourceMappingURL=data:application/json;base64,