// getting base64 icons
import { errorBase64Data } from './../../../assets/icons/error.base64';
export class D3NodeBasicParser {
    constructor() {
        // dimensions
        this.width = 240;
        this.height = 100;
        this.defaultImage = {
            type: 'link',
            data: "https://raw.githubusercontent.com/hdcolelia/be-orgchart/master/src/lib/assets/images/root.png"
        };
        // error icon
        this.errorBase64Icon = errorBase64Data;
        this.imageDefs = {
            x: -20, y: -15, h: 60, w: 60, rx: 60
        };
        this.transitionDuration = 600;
    }
    addImage() {
    }
    drawNodes(prGroup, prClickEvent) {
        const me = this;
        // adding rect
        prGroup.append('rect').attr('class', 'node-rect')
            .attr('width', me.width).attr('height', me.height)
            .attr('stroke', 'blue').attr('stroke-width', 1)
            .attr('fill', '#02B2AC').attr('rx', 12)
            .on('click', (node) => {
            prClickEvent.next({ id: node.data.nodeId, node: node.data });
        });
        // adding title
        prGroup.append('text').append('tspan').text(d => d.data.title)
            .attr('font-size', 15).attr('x', 50).attr('y', 25);
        // adding description
        prGroup.append('text').append('tspan').text(d => d.data.description)
            .attr('font-size', 10).attr('x', 50).attr('y', 45);
        // adding description
        prGroup.append('text').text(d => d.data.nodeId)
            .attr('font-size', 10).attr('x', 50).attr('y', 65);
        // adding image
        const imageUrl = (d) => {
            if (d.data.nodeImage)
                return `url(#img-${d.data.nodeId})`;
            if (me.defaultImage)
                return `url(#img-default-node-img)`;
            return '';
        };
        prGroup.filter(d => imageUrl(d) != '')
            .append('rect').attr('class', 'node-image')
            .attr('x', me.imageDefs.x).attr('y', me.imageDefs.y)
            .attr('width', me.imageDefs.w).attr('height', me.imageDefs.h)
            .attr('fill', d => imageUrl(d)).attr('rx', me.imageDefs.rx)
            .on('click', (node) => {
            prClickEvent.next({ id: node.data.nodeId, node: node.data });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1iYXNpYy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2JlLW9yZ2NoYXJ0LyIsInNvdXJjZXMiOlsibGliL2NsYXNlc3MvQGl0ZW1zL2Jhc2ljL25vZGUtYmFzaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsdUJBQXVCO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUd2RSxNQUFNLE9BQU8saUJBQWlCO0lBQzVCO1FBQ0EsYUFBYTtRQUNiLFVBQUssR0FBVyxHQUFHLENBQUM7UUFDcEIsV0FBTSxHQUFXLEdBQUcsQ0FBQztRQUVyQixpQkFBWSxHQUFlO1lBQ3pCLElBQUksRUFBRSxNQUFNO1lBQ1osSUFBSSxFQUFFLCtGQUErRjtTQUN0RyxDQUFBO1FBRUQsYUFBYTtRQUNiLG9CQUFlLEdBQUcsZUFBZSxDQUFDO1FBRWxDLGNBQVMsR0FBK0Q7WUFDdEUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7U0FDckMsQ0FBQTtRQUVELHVCQUFrQixHQUFXLEdBQUcsQ0FBQztJQWpCakIsQ0FBQztJQW1CUCxRQUFRO0lBRWxCLENBQUM7SUFFRCxTQUFTLENBQ1AsT0FBNEUsRUFDNUUsWUFBb0Q7UUFFcEQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRWhCLGNBQWM7UUFDZCxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDO2FBQzlDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQzthQUNqRCxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxD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QUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuaW1wb3J0IHsgSUQzTm9kZSwgSUltYWdlRGVmIH0gZnJvbSAnLi8uLi8uLi8uLi9pbnRlcmZhY2VzJztcclxuXHJcbi8vIGdldHRpbmcgYmFzZTY0IGljb25zXHJcbmltcG9ydCB7IGVycm9yQmFzZTY0RGF0YSB9IGZyb20gJy4vLi4vLi4vLi4vYXNzZXRzL2ljb25zL2Vycm9yLmJhc2U2NCc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEM05vZGVCYXNpY1BhcnNlciB7XHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuICAvLyBkaW1lbnNpb25zXHJcbiAgd2lkdGg6IG51bWJlciA9IDI0MDtcclxuICBoZWlnaHQ6IG51bWJlciA9IDEwMDtcclxuXHJcbiAgZGVmYXVsdEltYWdlPzogSUltYWdlRGVmID0ge1xyXG4gICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgZGF0YTogXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaGRjb2xlbGlhL2JlLW9yZ2NoYXJ0L21hc3Rlci9zcmMvbGliL2Fzc2V0cy9pbWFnZXMvcm9vdC5wbmdcIlxyXG4gIH1cclxuXHJcbiAgLy8gZXJyb3IgaWNvblxyXG4gIGVycm9yQmFzZTY0SWNvbiA9IGVycm9yQmFzZTY0RGF0YTtcclxuXHJcbiAgaW1hZ2VEZWZzOiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCBoOiBudW1iZXIsIHc6IG51bWJlciwgcng6IG51bWJlciB9ID0ge1xyXG4gICAgeDogLTIwLCB5OiAtMTUsIGg6IDYwLCB3OiA2MCwgcng6IDYwXHJcbiAgfVxyXG5cclxuICB0cmFuc2l0aW9uRHVyYXRpb246IG51bWJlciA9IDYwMDtcclxuXHJcbiAgcHJvdGVjdGVkIGFkZEltYWdlKCkge1xyXG5cclxuICB9XHJcblxyXG4gIGRyYXdOb2RlcyhcclxuICAgIHByR3JvdXA6IGQzLlNlbGVjdGlvbjxTVkdHRWxlbWVudCwgZDMuSGllcmFyY2h5UG9pbnROb2RlPElEM05vZGU+LCBhbnksIGFueT4sXHJcbiAgICBwckNsaWNrRXZlbnQ6IFN1YmplY3Q8eyBpZDogc3RyaW5nLCBub2RlOiBJRDNOb2RlIH0+XHJcbiAgKSB7XHJcbiAgICBjb25zdCBtZSA9IHRoaXM7XHJcblxyXG4gICAgLy8gYWRkaW5nIHJlY3RcclxuICAgIHByR3JvdXAuYXBwZW5kKCdyZWN0JykuYXR0cignY2xhc3MnLCAnbm9kZS1yZWN0JylcclxuICAgICAgLmF0dHIoJ3dpZHRoJywgbWUud2lkdGgpLmF0dHIoJ2hlaWdodCcsIG1lLmhlaWdodClcclxuICAgICAgLmF0dHIoJ3N0cm9rZScsICdibHVlJykuYXR0cignc3Ryb2tlLXdpZHRoJywgMSlcclxuICAgICAgLmF0dHIoJ2ZpbGwnLCAnIzAyQjJBQycpLmF0dHIoJ3J4JywgMTIpXHJcbiAgICAgIC5vbignY2xpY2snLCAobm9kZSkgPT4ge1xyXG4gICAgICAgIHByQ2xpY2tFdmVudC5uZXh0KHsgaWQ6IG5vZGUuZGF0YS5ub2RlSWQsIG5vZGU6IG5vZGUuZGF0YSB9KTtcclxuICAgICAgfSlcclxuXHJcbiAgICAvLyBhZGRpbmcgdGl0bGVcclxuICAgIHByR3JvdXAuYXBwZW5kKCd0ZXh0JykuYXBwZW5kKCd0c3BhbicpLnRleHQoZCA9PiBkLmRhdGEudGl0bGUpXHJcbiAgICAgIC5hdHRyKCdmb250LXNpemUnLCAxNSkuYXR0cigneCcsIDUwKS5hdHRyKCd5JywgMjUpO1xyXG5cclxuICAgIC8vIGFkZGluZyBkZXNjcmlwdGlvblxyXG4gICAgcHJHcm91cC5hcHBlbmQoJ3RleHQnKS5hcHBlbmQoJ3RzcGFuJykudGV4dChkID0+IGQuZGF0YS5kZXNjcmlwdGlvbilcclxuICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsIDEwKS5hdHRyKCd4JywgNTApLmF0dHIoJ3knLCA0NSk7XHJcbiAgICAvLyBhZGRpbmcgZGVzY3JpcHRpb25cclxuICAgIHByR3JvdXAuYXBwZW5kKCd0ZXh0JykudGV4dChkID0+IGQuZGF0YS5ub2RlSWQpXHJcbiAgICAgIC5hdHRyKCdmb250LXNpemUnLCAxMCkuYXR0cigneCcsIDUwKS5hdHRyKCd5JywgNjUpO1xyXG5cclxuICAgIC8vIGFkZGluZyBpbWFnZVxyXG4gICAgY29uc3QgaW1hZ2VVcmwgPSAoZDogZDMuSGllcmFyY2h5UG9pbnROb2RlPElEM05vZGU+KSA9PiB7XHJcbiAgICAgIGlmIChkLmRhdGEubm9kZUltYWdlKSByZXR1cm4gYHVybCgjaW1nLSR7ZC5kYXRhLm5vZGVJZH0pYDtcclxuICAgICAgaWYgKG1lLmRlZmF1bHRJbWFnZSkgcmV0dXJuIGB1cmwoI2ltZy1kZWZhdWx0LW5vZGUtaW1nKWA7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHByR3JvdXAuZmlsdGVyKGQgPT4gaW1hZ2VVcmwoZCkgIT0gJycpXHJcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKS5hdHRyKCdjbGFzcycsICdub2RlLWltYWdlJylcclxuICAgICAgLmF0dHIoJ3gnLCBtZS5pbWFnZURlZnMueCkuYXR0cigneScsIG1lLmltYWdlRGVmcy55KVxyXG4gICAgICAuYXR0cignd2lkdGgnLCBtZS5pbWFnZURlZnMudykuYXR0cignaGVpZ2h0JywgbWUuaW1hZ2VEZWZzLmgpXHJcbiAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBpbWFnZVVybChkKSkuYXR0cigncngnLCBtZS5pbWFnZURlZnMucngpXHJcbiAgICAgIC5vbignY2xpY2snLCAobm9kZSkgPT4ge1xyXG4gICAgICAgIHByQ2xpY2tFdmVudC5uZXh0KHsgaWQ6IG5vZGUuZGF0YS5ub2RlSWQsIG5vZGU6IG5vZGUuZGF0YSB9KTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxufSJdfQ==