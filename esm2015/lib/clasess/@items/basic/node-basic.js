// getting base64 icons
import { expandBase64Data } from './../../../assets/icons/expand.base64';
import { collapseBase64Data } from './../../../assets/icons/collapse.base64';
import { errorBase64Data } from './../../../assets/icons/error.base64';
export class D3NodeBasicParser {
    constructor() {
        // dimensions
        this.width = 220;
        this.height = 80;
        // expand / colapse icons
        this.expandBase64Icon = expandBase64Data;
        this.collapseBase64Icon = collapseBase64Data;
        // error icon
        this.errorBase64Icon = errorBase64Data;
        this.imageDefs = {
            x: -20, y: -15, h: 60, w: 60, rx: 6
        };
        this.transitionDuration = 500;
    }
    addImage() {
    }
    drawNodes(prGroup) {
        const me = this;
        // adding rect
        prGroup.append('rect').attr('class', 'node-rect')
            .attr('width', me.width).attr('height', me.height)
            .attr('stroke', 'blue').attr('stroke-width', 1)
            .attr('fill', '#02B2AC').attr('rx', 12);
        // adding title
        prGroup.append('text').text(d => d.data.title)
            .attr('font-size', 15).attr('x', 50).attr('y', 25);
        // adding description
        prGroup.append('text').text(d => d.data.description)
            .attr('font-size', 10).attr('x', 50).attr('y', 45);
        // prGroup.
        const imageData = (d) => {
            let linkRef = '';
            if (!d.data.nodeImage)
                return linkRef;
            if (d.data.nodeImage.url)
                linkRef = d.data.nodeImage.url;
            if (d.data.nodeImage.icon)
                linkRef = d.data.nodeImage.icon;
            if (d.data.nodeImage.base64)
                linkRef = `data:image/png;base64,${d.data.nodeImage.base64}`;
            return linkRef;
        };
        prGroup.filter(d => imageData(d) != '')
            .append('defs').append('pattern')
            .attr('id', d => `img-${d.data.nodeId}`)
            .attr('width', 1)
            .attr('height', 1)
            .append('image')
            .attr('xlink:href', d => imageData(d))
            .attr('width', me.imageDefs.w)
            .attr('height', me.imageDefs.h)
            .attr('preserveAspectRatio', 'xMidYMin slice');
        // adding image
        prGroup.filter(d => imageData(d) != '')
            .append('rect').attr('class', 'node-image')
            .attr('x', me.imageDefs.x).attr('y', me.imageDefs.y)
            .attr('width', me.imageDefs.w).attr('height', me.imageDefs.h)
            // .attr('stroke', 'blue').attr('stroke-width', 1)
            .attr('fill', d => `url(#img-${d.data.nodeId})`).attr('rx', me.imageDefs.rx);
        // prGroup.each((d, i) => me.drawNode(d, i, prGroup));
    }
    drawNode(prData, prIndex, node) {
        const me = this;
        // adding rect
        console.log('Node: ', node.property('class'));
        node.append('rect').attr('class', 'node-rect')
            .attr('width', me.width).attr('height', me.height)
            .attr('stroke', 'blue').attr('stroke-width', 1)
            .attr('fill', '#02B2AC').attr('rx', 12);
        console.log('Adding text : ', prData.data.nodeId);
        // adding title
        node.append('text').text(d => d.data.title)
            .attr('font-size', 15).attr('x', 50).attr('y', 25);
        // adding description
        node.append('text').text(d => d.data.description)
            .attr('font-size', 10).attr('x', 50).attr('y', 45);
        // prGroup.
        if (prData.data.nodeImage) {
            const defs = node.append('defs').append('pattern')
                .attr('id', d => `img-${d.data.nodeId}`)
                .attr('width', 1)
                .attr('height', 1);
            let linkRef = '';
            if (prData.data.nodeImage.url)
                linkRef = prData.data.nodeImage.url;
            if (prData.data.nodeImage.icon)
                linkRef = prData.data.nodeImage.icon;
            if (prData.data.nodeImage.base64)
                linkRef = `data:image/png;base64,${prData.data.nodeImage.base64}`;
            const image = defs.append('image')
                .attr('xlink:href', linkRef)
                .attr('width', me.imageDefs.w)
                .attr('height', me.imageDefs.h)
                // .attr('viewbox', '0 0 100 100')
                .attr('preserveAspectRatio', 'xMidYMin slice');
            // adding image
            node.append('rect').attr('class', 'node-image')
                .attr('x', me.imageDefs.x).attr('y', me.imageDefs.y)
                .attr('width', me.imageDefs.w).attr('height', me.imageDefs.h)
                // .attr('stroke', 'blue').attr('stroke-width', 1)
                .attr('fill', d => `url(#img-${d.data.nodeId})`).attr('rx', me.imageDefs.rx);
        }
    }
    xxxdrawNodes(prGroup) {
        const me = this;
        prGroup
            .append('defs')
            .append('pattern')
            .attr('id', d => `img-${d.data.nodeId}`)
            .attr('width', 70)
            .attr('height', 70)
            .append('image')
            .attr('xlink:href', d => d.data.nodeImage.url)
            .attr('width', 70)
            .attr('height', 70);
        // adding rect
        prGroup.append('rect').attr('class', 'node-rect')
            .attr('width', me.width).attr('height', me.height)
            .attr('stroke', 'blue').attr('stroke-width', 1)
            .attr('fill', 'gray').attr('rx', 12);
        // adding title
        prGroup.append('text').text(d => d.data.title)
            .attr('font-size', 10).attr('x', 70).attr('y', 25);
        // adding description
        prGroup.append('text').text(d => d.data.description)
            .attr('font-size', 10).attr('x', 70).attr('y', 45);
        // adding image
        prGroup.append('rect').attr('class', 'node-image')
            .attr('x', 5).attr('y', 10)
            .attr('width', 50).attr('height', 50)
            .attr('fill', d => `url(#img-${d.data.nodeId})`);
        // prGroup.
    }
    updateNodes(prGroup, prNodes) {
        prGroup.select('rect.node-rect').attr('fill', 'black');
        //  .each(d => {
        //    console.log('argument: ', d);
        //  })
        //.data(prNodes).select('rect.node-rect')
        //.attr('x', d => d.x)
        //.attr('y', d => d.y);
        // console.log('Updateing...:', prGroup)
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1iYXNpYy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BiZS9vcmdjaGFydC8iLCJzb3VyY2VzIjpbImxpYi9jbGFzZXNzL0BpdGVtcy9iYXNpYy9ub2RlLWJhc2ljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLHVCQUF1QjtBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFdkUsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QjtRQUNBLGFBQWE7UUFDYixVQUFLLEdBQVcsR0FBRyxDQUFDO1FBQ3BCLFdBQU0sR0FBVyxFQUFFLENBQUM7UUFFcEIseUJBQXlCO1FBQ3pCLHFCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBQ3BDLHVCQUFrQixHQUFHLGtCQUFrQixDQUFDO1FBRXhDLGFBQWE7UUFDYixvQkFBZSxHQUFHLGVBQWUsQ0FBQztRQUVsQyxjQUFTLEdBQStEO1lBQ3RFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1NBQ3BDLENBQUE7UUFFRCx1QkFBa0IsR0FBVyxHQUFHLENBQUM7SUFoQmpCLENBQUM7SUFrQlAsUUFBUTtJQUVsQixDQUFDO0lBRUQsU0FBUyxDQUNQLE9BQTRFO1FBRTVFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUVoQixjQUFjO1FBQ2QsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQzthQUM5QyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUs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O1FBQ3pDLHNCQUFzQjtRQUN0Qix1QkFBdUI7UUFDdkIsd0NBQXdDO0lBQzFDLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuaW1wb3J0IHsgSUQzTm9kZSB9IGZyb20gJy4vLi4vLi4vLi4vaW50ZXJmYWNlcyc7XHJcblxyXG4vLyBnZXR0aW5nIGJhc2U2NCBpY29uc1xyXG5pbXBvcnQgeyBleHBhbmRCYXNlNjREYXRhIH0gZnJvbSAnLi8uLi8uLi8uLi9hc3NldHMvaWNvbnMvZXhwYW5kLmJhc2U2NCc7XHJcbmltcG9ydCB7IGNvbGxhcHNlQmFzZTY0RGF0YSB9IGZyb20gJy4vLi4vLi4vLi4vYXNzZXRzL2ljb25zL2NvbGxhcHNlLmJhc2U2NCc7XHJcbmltcG9ydCB7IGVycm9yQmFzZTY0RGF0YSB9IGZyb20gJy4vLi4vLi4vLi4vYXNzZXRzL2ljb25zL2Vycm9yLmJhc2U2NCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRDNOb2RlQmFzaWNQYXJzZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcbiAgLy8gZGltZW5zaW9uc1xyXG4gIHdpZHRoOiBudW1iZXIgPSAyMjA7XHJcbiAgaGVpZ2h0OiBudW1iZXIgPSA4MDtcclxuXHJcbiAgLy8gZXhwYW5kIC8gY29sYXBzZSBpY29uc1xyXG4gIGV4cGFuZEJhc2U2NEljb24gPSBleHBhbmRCYXNlNjREYXRhO1xyXG4gIGNvbGxhcHNlQmFzZTY0SWNvbiA9IGNvbGxhcHNlQmFzZTY0RGF0YTtcclxuXHJcbiAgLy8gZXJyb3IgaWNvblxyXG4gIGVycm9yQmFzZTY0SWNvbiA9IGVycm9yQmFzZTY0RGF0YTtcclxuXHJcbiAgaW1hZ2VEZWZzOiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCBoOiBudW1iZXIsIHc6IG51bWJlciwgcng6IG51bWJlciB9ID0ge1xyXG4gICAgeDogLTIwLCB5OiAtMTUsIGg6IDYwLCB3OiA2MCwgcng6IDZcclxuICB9XHJcblxyXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogbnVtYmVyID0gNTAwO1xyXG5cclxuICBwcm90ZWN0ZWQgYWRkSW1hZ2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgZHJhd05vZGVzKFxyXG4gICAgcHJHcm91cDogZDMuU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBkMy5IaWVyYXJjaHlQb2ludE5vZGU8SUQzTm9kZT4sIGFueSwgYW55PlxyXG4gICkge1xyXG4gICAgY29uc3QgbWUgPSB0aGlzO1xyXG5cclxuICAgIC8vIGFkZGluZyByZWN0XHJcbiAgICBwckdyb3VwLmFwcGVuZCgncmVjdCcpLmF0dHIoJ2NsYXNzJywgJ25vZGUtcmVjdCcpXHJcbiAgICAgIC5hdHRyKCd3aWR0aCcsIG1lLndpZHRoKS5hdHRyKCdoZWlnaHQnLCBtZS5oZWlnaHQpXHJcbiAgICAgIC5hdHRyKCdzdHJva2UnLCAnYmx1ZScpLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDEpXHJcbiAgICAgIC5hdHRyKCdmaWxsJywgJyMwMkIyQUMnKS5hdHRyKCdyeCcsIDEyKTtcclxuXHJcbiAgICAvLyBhZGRpbmcgdGl0bGVcclxuICAgIHByR3JvdXAuYXBwZW5kKCd0ZXh0JykudGV4dChkID0+IGQuZGF0YS50aXRsZSlcclxuICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsIDE1KS5hdHRyKCd4JywgNTApLmF0dHIoJ3knLCAyNSk7XHJcblxyXG4gICAgLy8gYWRkaW5nIGRlc2NyaXB0aW9uXHJcbiAgICBwckdyb3VwLmFwcGVuZCgndGV4dCcpLnRleHQoZCA9PiBkLmRhdGEuZGVzY3JpcHRpb24pXHJcbiAgICAgIC5hdHRyKCdmb250LXNpemUnLCAxMCkuYXR0cigneCcsIDUwKS5hdHRyKCd5JywgNDUpO1xyXG4gICAgLy8gcHJHcm91cC5cclxuICAgIGNvbnN0IGltYWdlRGF0YSA9IChkOiBkMy5IaWVyYXJjaHlQb2ludE5vZGU8SUQzTm9kZT4pID0+IHtcclxuICAgICAgbGV0IGxpbmtSZWY6IHN0cmluZyA9ICcnXHJcbiAgICAgIGlmICghZC5kYXRhLm5vZGVJbWFnZSkgcmV0dXJuIGxpbmtSZWY7XHJcblxyXG4gICAgICBpZiAoZC5kYXRhLm5vZGVJbWFnZS51cmwpIGxpbmtSZWYgPSBkLmRhdGEubm9kZUltYWdlLnVybDtcclxuICAgICAgaWYgKGQuZGF0YS5ub2RlSW1hZ2UuaWNvbikgbGlua1JlZiA9IGQuZGF0YS5ub2RlSW1hZ2UuaWNvbjtcclxuICAgICAgaWYgKGQuZGF0YS5ub2RlSW1hZ2UuYmFzZTY0KSBsaW5rUmVmID0gYGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwke2QuZGF0YS5ub2RlSW1hZ2UuYmFzZTY0fWA7XHJcbiAgICAgIHJldHVybiBsaW5rUmVmO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwckdyb3VwLmZpbHRlcihkID0+IGltYWdlRGF0YShkKSAhPSAnJylcclxuICAgICAgLmFwcGVuZCgnZGVmcycpLmFwcGVuZCgncGF0dGVybicpXHJcbiAgICAgIC5hdHRyKCdpZCcsIGQgPT4gYGltZy0ke2QuZGF0YS5ub2RlSWR9YClcclxuICAgICAgLmF0dHIoJ3dpZHRoJywgMSlcclxuICAgICAgLmF0dHIoJ2hlaWdodCcsIDEpXHJcbiAgICAgIC5hcHBlbmQoJ2ltYWdlJylcclxuICAgICAgLmF0dHIoJ3hsaW5rOmhyZWYnLCBkID0+IGltYWdlRGF0YShkKSlcclxuICAgICAgLmF0dHIoJ3dpZHRoJywgbWUuaW1hZ2VEZWZzLncpXHJcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCBtZS5pbWFnZURlZnMuaClcclxuICAgICAgLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaW4gc2xpY2UnKTtcclxuXHJcbiAgICAvLyBhZGRpbmcgaW1hZ2VcclxuICAgIHByR3JvdXAuZmlsdGVyKGQgPT4gaW1hZ2VEYXRhKGQpICE9ICcnKVxyXG4gICAgICAuYXBwZW5kKCdyZWN0JykuYXR0cignY2xhc3MnLCAnbm9kZS1pbWFnZScpXHJcbiAgICAgIC5hdHRyKCd4JywgbWUuaW1hZ2VEZWZzLngpLmF0dHIoJ3knLCBtZS5pbWFnZURlZnMueSlcclxuICAgICAgLmF0dHIoJ3dpZHRoJywgbWUuaW1hZ2VEZWZzLncpLmF0dHIoJ2hlaWdodCcsIG1lLmltYWdlRGVmcy5oKVxyXG4gICAgICAvLyAuYXR0cignc3Ryb2tlJywgJ2JsdWUnKS5hdHRyKCdzdHJva2Utd2lkdGgnLCAxKVxyXG4gICAgICAuYXR0cignZmlsbCcsIGQgPT4gYHVybCgjaW1nLSR7ZC5kYXRhLm5vZGVJZH0pYCkuYXR0cigncngnLCBtZS5pbWFnZURlZnMucngpO1xyXG4gICAgLy8gcHJHcm91cC5lYWNoKChkLCBpKSA9PiBtZS5kcmF3Tm9kZShkLCBpLCBwckdyb3VwKSk7XHJcbiAgfVxyXG5cclxuICBkcmF3Tm9kZShwckRhdGE6IGQzLkhpZXJhcmNoeVBvaW50Tm9kZTxJRDNOb2RlPiwgcHJJbmRleDogbnVtYmVyLCBub2RlOiBkMy5TZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGQzLkhpZXJhcmNoeVBvaW50Tm9kZTxJRDNOb2RlPiwgYW55LCBhbnk+KSB7XHJcbiAgICBjb25zdCBtZSA9IHRoaXM7XHJcblxyXG4gICAgLy8gYWRkaW5nIHJlY3RcclxuICAgIGNvbnNvbGUubG9nKCdOb2RlOiAnLCBub2RlLnByb3BlcnR5KCdjbGFzcycpKVxyXG4gICAgbm9kZS5hcHBlbmQoJ3JlY3QnKS5hdHRyKCdjbGFzcycsICdub2RlLXJlY3QnKVxyXG4gICAgICAuYXR0cignd2lkdGgnLCBtZS53aWR0aCkuYXR0cignaGVpZ2h0JywgbWUuaGVpZ2h0KVxyXG4gICAgICAuYXR0cignc3Ryb2tlJywgJ2JsdWUnKS5hdHRyKCdzdHJva2Utd2lkdGgnLCAxKVxyXG4gICAgICAuYXR0cignZmlsbCcsICcjMDJCMkFDJykuYXR0cigncngnLCAxMik7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ0FkZGluZyB0ZXh0IDogJywgcHJEYXRhLmRhdGEubm9kZUlkKVxyXG5cclxuICAgIC8vIGFkZGluZyB0aXRsZVxyXG4gICAgbm9kZS5hcHBlbmQoJ3RleHQnKS50ZXh0KGQgPT4gZC5kYXRhLnRpdGxlKVxyXG4gICAgICAuYXR0cignZm9udC1zaXplJywgMTUpLmF0dHIoJ3gnLCA1MCkuYXR0cigneScsIDI1KTtcclxuXHJcbiAgICAvLyBhZGRpbmcgZGVzY3JpcHRpb25cclxuICAgIG5vZGUuYXBwZW5kKCd0ZXh0JykudGV4dChkID0+IGQuZGF0YS5kZXNjcmlwdGlvbilcclxuICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsIDEwKS5hdHRyKCd4JywgNTApLmF0dHIoJ3knLCA0NSk7XHJcbiAgICAvLyBwckdyb3VwLlxyXG5cclxuXHJcbiAgICBpZiAocHJEYXRhLmRhdGEubm9kZUltYWdlKSB7XHJcbiAgICAgIGNvbnN0IGRlZnMgPSBub2RlLmFwcGVuZCgnZGVmcycpLmFwcGVuZCgncGF0dGVybicpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgZCA9PiBgaW1nLSR7ZC5kYXRhLm5vZGVJZH1gKVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIDEpXHJcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDEpO1xyXG5cclxuICAgICAgbGV0IGxpbmtSZWY6IHN0cmluZyA9ICcnXHJcbiAgICAgIGlmIChwckRhdGEuZGF0YS5ub2RlSW1hZ2UudXJsKSBsaW5rUmVmID0gcHJEYXRhLmRhdGEubm9kZUltYWdlLnVybDtcclxuICAgICAgaWYgKHByRGF0YS5kYXRhLm5vZGVJbWFnZS5pY29uKSBsaW5rUmVmID0gcHJEYXRhLmRhdGEubm9kZUltYWdlLmljb247XHJcbiAgICAgIGlmIChwckRhdGEuZGF0YS5ub2RlSW1hZ2UuYmFzZTY0KSBsaW5rUmVmID0gYGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwke3ByRGF0YS5kYXRhLm5vZGVJbWFnZS5iYXNlNjR9YDtcclxuXHJcbiAgICAgIGNvbnN0IGltYWdlID0gZGVmcy5hcHBlbmQoJ2ltYWdlJylcclxuICAgICAgICAuYXR0cigneGxpbms6aHJlZicsIGxpbmtSZWYpXHJcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgbWUuaW1hZ2VEZWZzLncpXHJcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIG1lLmltYWdlRGVmcy5oKVxyXG4gICAgICAgIC8vIC5hdHRyKCd2aWV3Ym94JywgJzAgMCAxMDAgMTAwJylcclxuXHJcbiAgICAgICAgLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaW4gc2xpY2UnKTtcclxuICAgICAgLy8gYWRkaW5nIGltYWdlXHJcbiAgICAgIG5vZGUuYXBwZW5kKCdyZWN0JykuYXR0cignY2xhc3MnLCAnbm9kZS1pbWFnZScpXHJcbiAgICAgICAgLmF0dHIoJ3gnLCBtZS5pbWFnZURlZnMueCkuYXR0cigneScsIG1lLmltYWdlRGVmcy55KVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIG1lLmltYWdlRGVmcy53KS5hdHRyKCdoZWlnaHQnLCBtZS5pbWFnZURlZnMuaClcclxuICAgICAgICAvLyAuYXR0cignc3Ryb2tlJywgJ2JsdWUnKS5hdHRyKCdzdHJva2Utd2lkdGgnLCAxKVxyXG4gICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBgdXJsKCNpbWctJHtkLmRhdGEubm9kZUlkfSlgKS5hdHRyKCdyeCcsIG1lLmltYWdlRGVmcy5yeCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB4eHhkcmF3Tm9kZXMoXHJcbiAgICBwckdyb3VwOiBkMy5TZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGQzLkhpZXJhcmNoeVBvaW50Tm9kZTxJRDNOb2RlPiwgYW55LCBhbnk+XHJcbiAgKSB7XHJcbiAgICBjb25zdCBtZSA9IHRoaXM7XHJcbiAgICBwckdyb3VwXHJcbiAgICAgIC5hcHBlbmQoJ2RlZnMnKVxyXG4gICAgICAuYXBwZW5kKCdwYXR0ZXJuJylcclxuICAgICAgLmF0dHIoJ2lkJywgZCA9PiBgaW1nLSR7ZC5kYXRhLm5vZGVJZH1gKVxyXG4gICAgICAuYXR0cignd2lkdGgnLCA3MClcclxuICAgICAgLmF0dHIoJ2hlaWdodCcsIDcwKVxyXG4gICAgICAuYXBwZW5kKCdpbWFnZScpXHJcbiAgICAgIC5hdHRyKCd4bGluazpocmVmJywgZCA9PiBkLmRhdGEubm9kZUltYWdlLnVybClcclxuICAgICAgLmF0dHIoJ3dpZHRoJywgNzApXHJcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCA3MCk7XHJcblxyXG4gICAgLy8gYWRkaW5nIHJlY3RcclxuICAgIHByR3JvdXAuYXBwZW5kKCdyZWN0JykuYXR0cignY2xhc3MnLCAnbm9kZS1yZWN0JylcclxuICAgICAgLmF0dHIoJ3dpZHRoJywgbWUud2lkdGgpLmF0dHIoJ2hlaWdodCcsIG1lLmhlaWdodClcclxuICAgICAgLmF0dHIoJ3N0cm9rZScsICdibHVlJykuYXR0cignc3Ryb2tlLXdpZHRoJywgMSlcclxuICAgICAgLmF0dHIoJ2ZpbGwnLCAnZ3JheScpLmF0dHIoJ3J4JywgMTIpO1xyXG5cclxuICAgIC8vIGFkZGluZyB0aXRsZVxyXG4gICAgcHJHcm91cC5hcHBlbmQoJ3RleHQnKS50ZXh0KGQgPT4gZC5kYXRhLnRpdGxlKVxyXG4gICAgICAuYXR0cignZm9udC1zaXplJywgMTApLmF0dHIoJ3gnLCA3MCkuYXR0cigneScsIDI1KTtcclxuXHJcbiAgICAvLyBhZGRpbmcgZGVzY3JpcHRpb25cclxuICAgIHByR3JvdXAuYXBwZW5kKCd0ZXh0JykudGV4dChkID0+IGQuZGF0YS5kZXNjcmlwdGlvbilcclxuICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsIDEwKS5hdHRyKCd4JywgNzApLmF0dHIoJ3knLCA0NSk7XHJcblxyXG4gICAgLy8gYWRkaW5nIGltYWdlXHJcbiAgICBwckdyb3VwLmFwcGVuZCgncmVjdCcpLmF0dHIoJ2NsYXNzJywgJ25vZGUtaW1hZ2UnKVxyXG4gICAgICAuYXR0cigneCcsIDUpLmF0dHIoJ3knLCAxMClcclxuICAgICAgLmF0dHIoJ3dpZHRoJywgNTApLmF0dHIoJ2hlaWdodCcsIDUwKVxyXG4gICAgICAuYXR0cignZmlsbCcsIGQgPT4gYHVybCgjaW1nLSR7ZC5kYXRhLm5vZGVJZH0pYCk7XHJcbiAgICAvLyBwckdyb3VwLlxyXG5cclxuICB9XHJcblxyXG4gIHVwZGF0ZU5vZGVzKHByR3JvdXA6IGQzLlNlbGVjdGlvbjxTVkdHRWxlbWVudCwgYW55LCBhbnksIGFueT4sIHByTm9kZXM6IGQzLkhpZXJhcmNoeVBvaW50Tm9kZTxJRDNOb2RlPltdKSB7XHJcbiAgICBwckdyb3VwLnNlbGVjdCgncmVjdC5ub2RlLXJlY3QnKS5hdHRyKCdmaWxsJywgJ2JsYWNrJylcclxuICAgIC8vICAuZWFjaChkID0+IHtcclxuICAgIC8vICAgIGNvbnNvbGUubG9nKCdhcmd1bWVudDogJywgZCk7XHJcbiAgICAvLyAgfSlcclxuXHJcbiAgICAvLy5kYXRhKHByTm9kZXMpLnNlbGVjdCgncmVjdC5ub2RlLXJlY3QnKVxyXG4gICAgLy8uYXR0cigneCcsIGQgPT4gZC54KVxyXG4gICAgLy8uYXR0cigneScsIGQgPT4gZC55KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdVcGRhdGVpbmcuLi46JywgcHJHcm91cClcclxuICB9XHJcblxyXG59Il19