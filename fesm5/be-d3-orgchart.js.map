{"version":3,"file":"be-d3-orgchart.js","sources":["ng://be-d3-orgchart/lib/components/@items/basic/item-basic.ts","ng://be-d3-orgchart/lib/clasess/d3-org-chart.class.ts","ng://be-d3-orgchart/lib/components/orgchart/be-d3-orgchart.component.html","ng://be-d3-orgchart/lib/components/orgchart/be-d3-orgchart.component.ts","ng://be-d3-orgchart/lib/be-d3-orgchart.module.ts","ng://be-d3-orgchart/public-api.ts","ng://be-d3-orgchart/be-d3-orgchart.ts"],"sourcesContent":["import * as d3 from 'd3';\r\nimport { ID3Node } from '../../../interfaces';\r\n\r\nexport class NodeItemParser {\r\n  constructor() { }\r\n\r\n  // dimensions\r\n  width: number = 240;\r\n  height: number = 150;\r\n\r\n  defs: d3.Selection<SVGDefsElement, any, any, any>\r\n\r\n  prepareDefs(prSVG: d3.Selection<SVGElement, any, any, any>) {\r\n    const me = this;\r\n    me.defs = prSVG.append('defs');\r\n  }\r\n\r\n  drawNodes(prGroup: d3.Selection<SVGGElement, any, any, any>, prNodes: d3.HierarchyPointNode<ID3Node>[]) {\r\n    const me = this;\r\n\r\n    prGroup.data(prNodes, (d: d3.HierarchyPointNode<ID3Node>) => d.id)\r\n      .append('rect')\r\n      .attr('class', 'node-rect')\r\n      .attr('width', me.width)\r\n      .attr('height', me.height)\r\n      .attr('stroke', 'blue')\r\n      .attr('stroke-width', 2)\r\n      .attr('fill', 'gray');\r\n  }\r\n\r\n  updateNodes(prGroup: d3.Selection<SVGGElement, any, any, any>, prNodes: d3.HierarchyPointNode<ID3Node>[]) {\r\n    prGroup.select('rect.node-rect').attr('fill', 'black')\r\n    //  .each(d => {\r\n    //    console.log('argument: ', d);\r\n    //  })\r\n\r\n    //.data(prNodes).select('rect.node-rect')\r\n    //.attr('x', d => d.x)\r\n    //.attr('y', d => d.y);\r\n    // console.log('Updateing...:', prGroup)\r\n  }\r\n\r\n}","//#region \r\n// Desarrollado en base a: \r\n//  https://bl.ocks.org/bumbeishvili/09a03b81ae788d2d14f750afe59eb7de\r\n//  https://github.com/bumbeishvili/d3-organization-chart\r\n//#endregion\r\n\r\nimport * as d3 from 'd3';\r\nimport { ID3Node } from '../interfaces';\r\nimport { Subject, fromEvent } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { NodeItemParser } from './../components/@items/basic/item-basic';\r\n\r\nexport interface ID3OrgChartOptions {\r\n  nodeParser?: NodeItemParser;\r\n  data?: ID3Node[];\r\n  backgroundColor?: string;\r\n  defaultFont?: string;\r\n}\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class D3OrgChart {\r\n  //#region Default Options\r\n  protected options: ID3OrgChartOptions = {\r\n    backgroundColor: '#03A3C5',\r\n    nodeParser: new NodeItemParser(),\r\n    data: [],\r\n    defaultFont: 'Tahoma'\r\n  }\r\n  //#endregion\r\n\r\n  //#region SVG compoennts\r\n  protected container: d3.Selection<HTMLElement, any, any, any>;\r\n  protected svg: d3.Selection<any, any, any, any>;\r\n  protected chart: d3.Selection<any, any, any, any>;\r\n  protected centerG: d3.Selection<any, any, any, any>;\r\n\r\n  protected defs: any;\r\n  protected lastTransform: any;\r\n  //#endregion\r\n\r\n  //#region DATA\r\n  protected root: d3.HierarchyPointNode<ID3Node>;\r\n  protected allNodes: any;\r\n\r\n  protected _data: ID3Node[] = [];\r\n  get data(): ID3Node[] {\r\n    return this._data || [];\r\n  }\r\n\r\n  set data(data: ID3Node[]) {\r\n    this._data = data;\r\n    // this.render()\r\n  }\r\n  //#endregion\r\n\r\n  //#region  NODE PARSER\r\n  protected _nodeParser: NodeItemParser;\r\n  get nodeParser(): NodeItemParser {\r\n    return this._nodeParser;\r\n  }\r\n  set nodeParser(parser: NodeItemParser) {\r\n    this._nodeParser = parser;\r\n    // this.render();\r\n  }\r\n  //#endregion\r\n\r\n  currentZoom: number = 1;\r\n\r\n  protected _nodeSize: ISize = {\r\n    width: 250,\r\n    height: 200\r\n  };\r\n\r\n  get nodeSize() {\r\n    return this._nodeSize;\r\n  }\r\n\r\n  set nodeSize(prSize: ISize) {\r\n    this._nodeSize = prSize;\r\n  }\r\n\r\n  treemap: d3.TreeLayout<ID3Node>;\r\n\r\n  constructor(prContainer: HTMLElement, prOptions?: ID3OrgChartOptions) {\r\n    const me = this;\r\n\r\n    // init container\r\n    me.container = d3.select(prContainer);\r\n\r\n    //If Data argument passed - then set it\r\n    if (prOptions?.data) me._data = prOptions.data;\r\n\r\n    // setting parser\r\n    me._nodeParser = prOptions?.nodeParser || me.options.nodeParser;\r\n\r\n    // applying options\r\n    me.options = Object.assign(me.options, prOptions);\r\n\r\n    // monitor resize\r\n    fromEvent(window, 'resize')\r\n      .pipe(\r\n        debounceTime(300)\r\n      ).subscribe(\r\n        () => {\r\n          // HDC - VER this.prepareCanvas();\r\n          this.render();\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    const me = this;\r\n    // preparing svg\r\n    me.prepareCanvas();\r\n\r\n    // if no data then return\r\n    if (!me.data.length) return;\r\n\r\n    // preparing data\r\n    me.prepareData();\r\n\r\n    // showing nodes\r\n    me.showNodes();\r\n    return this;\r\n  }\r\n\r\n  // preparing canvas\r\n  protected prepareCanvas() {\r\n    const me = this;\r\n\r\n    //Drawing containers\r\n    const containerRect = me.container.node().getBoundingClientRect();\r\n    me.svg = me.container.selectAll('svg')\r\n      .data([{ id: 'svg' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter => enter\r\n          .append('svg')\r\n          .attr('class', 'svg-chart-container')\r\n          .attr('font-family', me.options.defaultFont)\r\n          .call(d3.zoom().on(\"zoom\", d => this.zoomed()))\r\n          .attr('cursor', 'move')\r\n          .style('background-color', me.options.backgroundColor),\r\n        update =>\r\n          update\r\n            .attr('width', containerRect.width)\r\n            .attr('height', containerRect.height)\r\n      );\r\n    //Add container g element\r\n    me.chart = me.svg.selectAll('g.chart')\r\n      .data([{ id: 'chart' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter => enter\r\n          .append('g')\r\n          .attr('class', 'chart')\r\n          .attr('transform', `translate(0,0)`),\r\n        update => update\r\n      )\r\n\r\n    // Add one more container g element, for better positioning controls\r\n    me.centerG = me.chart.selectAll('g.center-group')\r\n      .data([{ id: 'center-group' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter => enter.append('g')\r\n          .attr('class', 'center-group'),\r\n        update =>\r\n          update\r\n            .attr('transform', `translate(${containerRect.width / 2},${this._nodeSize.height}) scale(${this.currentZoom})`)\r\n      )\r\n  }\r\n\r\n  // preparing data\r\n  protected prepareData() {\r\n    const me = this;\r\n\r\n    // if no data return \r\n    if (!me.data.length) return;\r\n\r\n    // Convert flat data to hierarchical\r\n    me.root = d3.stratify<ID3Node>()\r\n      .id(({ nodeId }) => nodeId)\r\n      .parentId(({ parentNodeId }) => parentNodeId)\r\n      (me.data) as d3.HierarchyPointNode<ID3Node>;\r\n\r\n\r\n    // preparing treemap\r\n    const containerRect = me.container.node().getBoundingClientRect();\r\n    me.treemap = d3.tree<ID3Node>().size([containerRect.width || 250, containerRect.height])\r\n      .nodeSize([this._nodeSize.width + 100, this._nodeSize.height + 100]);\r\n\r\n    me.allNodes = me.treemap(me.root).descendants();\r\n  }\r\n\r\n  // showing nodes\r\n  protected showNodes() {\r\n    const me = this;\r\n    //  Assigns the x and y position for the nodes\r\n    const treeData = me.treemap(me.root);\r\n\r\n    // select nodes from center group\r\n\r\n    // it is necesary for scope \r\n    const drawNodes = (container, nodes) => me.nodeParser.drawNodes(container, nodes);\r\n\r\n    const nodes = treeData.descendants()\r\n      .filter(current =>\r\n        !current.parent\r\n        || current.parent.data.expanded\r\n      );\r\n\r\n    // rendering nodes\r\n    const nodeStartPosition = (d: d3.HierarchyPointNode<ID3Node>) => {\r\n      if (!d.parent) return `translate(${d.x - (me.nodeParser.width / 2)},${d.y})`;\r\n      return `translate(${d.parent.x - (me.nodeParser.width / 2)},${d.parent.y})`\r\n    }\r\n\r\n    const nodePosition = (d: d3.HierarchyPointNode<ID3Node>) =>\r\n      `translate(${d.x - (me.nodeParser.width / 2)},${d.y})`;\r\n\r\n    me.centerG.selectAll('g.node')\r\n      .data(nodes, (d: d3.HierarchyPointNode<ID3Node>) => d.data.nodeId)\r\n      .join(\r\n        enter =>\r\n          enter\r\n            .append('g')\r\n            .attr('class', 'node')\r\n            .attr('transform', nodeStartPosition)\r\n            .call(drawNodes, nodes)\r\n            .on('click', (node) => {\r\n\r\n              me.expand(node);\r\n\r\n              me.onNodeClick.next({ id: node.data.nodeId, node: node.data });\r\n            }),\r\n        update => update,\r\n        exit =>\r\n          exit\r\n            .transition()\r\n            .duration(600)\r\n            .attr('transform', nodeStartPosition)\r\n            .style(\"opacity\", 0)\r\n            .remove()\r\n      )\r\n      .transition().duration(600)\r\n      .attr('transform', nodePosition);\r\n\r\n    // rendering links\r\n\r\n    const pathStartingDiagonal = (d: d3.HierarchyPointNode<ID3Node>) => {\r\n      const target = { x: d.parent.x, y: d.parent.y + me.nodeParser.height };\r\n      return this.diagonal(target, target)\r\n    }\r\n\r\n    const pathDiagonal = (d: d3.HierarchyPointNode<ID3Node>) => {\r\n      const target = { x: d.parent.x, y: d.parent.y + me.nodeParser.height };\r\n      return this.diagonal(d, target)\r\n    }\r\n\r\n    me.centerG.selectAll('path.link')\r\n      .data(nodes.slice(1), (d: d3.HierarchyPointNode<ID3Node>) => d.data.nodeId)\r\n      .join(\r\n        enter =>\r\n          enter\r\n            .insert('path', 'g')\r\n            .attr('class', 'link')\r\n            .attr('fill', 'none')\r\n            .attr('stroke', 'blue')\r\n            .attr('stroke-width', 2)\r\n            .attr('d', pathStartingDiagonal),\r\n        update => update,\r\n        exit =>\r\n          exit\r\n            .transition().duration(600)\r\n            .attr('d', pathStartingDiagonal)\r\n            .remove()\r\n      )\r\n      .transition().duration(600)\r\n      .attr('d', pathDiagonal);\r\n  }\r\n\r\n  // Zoom handler function\r\n  zoomed() {\r\n    const me = this;\r\n    // Saving d3 event's transform object\r\n    me.lastTransform = d3.event.transform;\r\n    // Reposition and rescale chart accordingly\r\n    me.chart.attr('transform', me.lastTransform);\r\n  }\r\n  //#region Events\r\n  // node click\r\n  onNodeClick: Subject<{ id: string, node: ID3Node }> = new Subject();\r\n  protected _onNodeClick(nodeId: string, node: ID3Node) {\r\n    this.onNodeClick.next({ id: nodeId, node: node });\r\n  }\r\n  //#endregion\r\n\r\n  //drawNode(prNode: d3.HierarchyPointNode<ID3Node>) {\r\n  //  const me = this;\r\n  //  me.nodeParser.draw(me.centerG, prNode);\r\n  //}\r\n\r\n\r\n  // Generate custom diagonal - play with it here - https://observablehq.com/@bumbeishvili/curved-edges?collection=@bumbeishvili/work-components\r\n  diagonal(s, t) {\r\n\r\n    // Calculate some variables based on source and target (s,t) coordinates\r\n    const x = s.x;\r\n    const y = s.y;\r\n    const ex = t.x;\r\n    const ey = t.y;\r\n    let xrvs = ex - x < 0 ? -1 : 1;\r\n    let yrvs = ey - y < 0 ? -1 : 1;\r\n    let rdef = 35;\r\n    let rInitial = Math.abs(ex - x) / 2 < rdef ? Math.abs(ex - x) / 2 : rdef;\r\n    let r = Math.abs(ey - y) / 2 < rInitial ? Math.abs(ey - y) / 2 : rInitial;\r\n    let h = Math.abs(ey - y) / 2 - r;\r\n    let w = Math.abs(ex - x) - r * 2;\r\n\r\n    // Build the path\r\n    const path = `\r\n            M ${x} ${y}\r\n            L ${x} ${y + h * yrvs}\r\n            C  ${x} ${y + h * yrvs + r * yrvs} ${x} ${y + h * yrvs + r * yrvs} ${x + r * xrvs} ${y + h * yrvs + r * yrvs}\r\n            L ${x + w * xrvs + r * xrvs} ${y + h * yrvs + r * yrvs}\r\n            C ${ex}  ${y + h * yrvs + r * yrvs} ${ex}  ${y + h * yrvs + r * yrvs} ${ex} ${ey - h * yrvs}\r\n            L ${ex} ${ey}\r\n          `\r\n    // Return result\r\n    return path;\r\n  }\r\n\r\n  expand(node: d3.HierarchyPointNode<ID3Node>) {\r\n    const me = this;\r\n    const expanded = node.data.expanded;\r\n    node.data.expanded = !expanded;\r\n\r\n    const expand = (children: d3.HierarchyPointNode<ID3Node>[], expanded: boolean) => {\r\n      (children || [])\r\n        .forEach(current => {\r\n          current.data.hidden = !expanded;\r\n          expand(current.children, expanded);\r\n        });\r\n    }\r\n\r\n    expand(node.children, expanded);\r\n    me.render();\r\n  }\r\n\r\n}\r\n","<div #orgchart class=\"container\"></div>\r\n\r\n<ng-template #defaultTemplate>\r\n  <svg height=\"400\" width=\"450\">\r\n    <path id=\"lineAB\" d=\"M 100 350 l 150 -300\" stroke=\"red\" stroke-width=\"3\" fill=\"none\" />\r\n      <path id=\"lineBC\" d=\"M 250 50 l 150 300\" stroke=\"red\" stroke-width=\"3\" fill=\"none\" />\r\n      <path d=\"M 175 200 l 150 0\" stroke=\"green\" stroke-width=\"3\" fill=\"none\" />\r\n      <path d=\"M 100 350 q 150 -300 300 0\" stroke=\"blue\" stroke-width=\"5\" fill=\"none\" />\r\n      <!-- Mark relevant points -->\r\n      <g stroke=\"black\" stroke-width=\"3\" fill=\"black\"> \r\n        <circle id=\"pointA\" cx=\"100\" cy=\"350\" r=\"3\" />\r\n        <circle id=\"pointB\" cx=\"250\" cy=\"50\" r=\"3\" />\r\n        <circle id=\"pointC\" cx=\"400\" cy=\"350\" r=\"3\" />\r\n      </g>\r\n      <!-- Label the points -->\r\n      <g font-size=\"30\" font-family=\"sans-serif\" fill=\"black\" stroke=\"none\" text-anchor=\"middle\">\r\n        <text x=\"100\" y=\"350\" dx=\"-30\">A</text>\r\n        <text x=\"250\" y=\"50\" dy=\"-10\">B</text>\r\n        <text x=\"400\" y=\"350\" dx=\"30\">C</text>\r\n      </g>\r\n    </svg>\r\n</ng-template>\r\n\r\n<ng-template #nodeTemplate>\r\n  <div>\r\n    <p>$$title</p>\r\n    <p>$$id</p>\r\n  </div>\r\n</ng-template> ","import { Component, ElementRef, OnInit, ViewChildren, TemplateRef, QueryList, AfterViewInit, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { D3OrgChart, ID3OrgChartOptions } from '../../clasess/d3-org-chart.class';\r\nimport { ID3Node } from '../../interfaces';\r\nimport * as d3 from 'd3';\r\nimport { NodeItemParser } from '../@items/basic/item-basic';\r\n\r\n@Component({\r\n    selector: 'be-d3-orgchart',\r\n    templateUrl: './be-d3-orgchart.component.html',\r\n    styleUrls: ['./be-d3-orgchart.component.scss']\r\n})\r\nexport class BED3OrgchartComponent implements AfterViewInit, OnChanges {\r\n    @Input() nodes: ID3Node[];\r\n    @Input() nodeParser: NodeItemParser;\r\n\r\n    //#region Chart\r\n    protected _chart: D3OrgChart;\r\n    get chart(): D3OrgChart {\r\n        const me = this;\r\n        if (!me._chart) {\r\n            const options: ID3OrgChartOptions = {};\r\n            // adding nodes if defined\r\n            if (me.nodes) options.data = me.nodes;\r\n            // adding node parser if defined\r\n            if (me.nodeParser) options.nodeParser = me.nodeParser;\r\n\r\n            me._chart = new D3OrgChart(this.prEl.nativeElement, options);\r\n        };\r\n        return me._chart;\r\n    }\r\n    //#endregion\r\n\r\n    constructor(protected prEl: ElementRef) { }\r\n\r\n    ngAfterViewInit() {\r\n        this.init()\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const me = this;\r\n\r\n        // detecting changes of input\r\n        if (changes.nodeParser && changes.nodeParser.currentValue) {\r\n            me.assignNodeParser(changes.nodeParser.currentValue);\r\n            me.chart.render();\r\n        }\r\n\r\n        if (changes.nodes && changes.nodes.currentValue) {\r\n            me.assignData(changes.nodes.currentValue as ID3Node[]);\r\n            me.chart.render();\r\n        }\r\n\r\n    }\r\n\r\n    init() {\r\n        const me = this;\r\n        // init the canvas\r\n        const chart = me.chart; // Must be like this to ensure chart init\r\n        me.chart.render();\r\n        // setting data\r\n        me.chart.onNodeClick.subscribe(\r\n            (data: { id: string, node: ID3Node }) => {\r\n                console.log('Clicked: ', data)\r\n            }\r\n        )\r\n    }\r\n\r\n    assignData(data: ID3Node[] | ID3Node, clear: boolean = true) {\r\n        const me = this;\r\n        const chart = me.chart; // Must be like this to ensure chart init\r\n        // if isn´t array we convert it in array\r\n        if (!(data instanceof Array)) data = [data];\r\n        if (clear) {\r\n            chart.data = data;\r\n            return;\r\n        }\r\n        // pushing data\r\n        chart.data = [...chart.data, ...data];\r\n        chart.render();\r\n    }\r\n\r\n    assignNodeParser(prParser: NodeItemParser) {\r\n        const me = this;\r\n        const chart = me.chart; // Must be like this to ensure chart init\r\n        chart.nodeParser = prParser;\r\n        chart.render();\r\n    }\r\n\r\n\r\n    //#region Para Eliminar\r\n    // xxxinit() {\r\n    //     const me = this;\r\n    //     // Obtenemos la info\r\n    //     d3\r\n    //         .json('https://gist.githubusercontent.com/bumbeishvili/dc0d47bc95ef359fdc75b63cd65edaf2/raw/c33a3a1ef4ba927e3e92b81600c8c6ada345c64b/orgChart.json')\r\n    //         .then((data: ID3Node[]) => {\r\n\r\n    //             // data.forEach(current => { current.expanded = true; })\r\n    //             console.log('Adding data: ')\r\n    //             me.chart = new D3OrgChart(this.prEl.nativeElement, data);\r\n    //             me.chart.render();\r\n\r\n    //             me.chart.onNodeClick.subscribe(\r\n    //                 (data: { id: string, node: ID3Node }) => {\r\n    //                     console.log('Clicked: ', data)\r\n    //                 }\r\n    //             )\r\n    //         });\r\n\r\n    //     // me.chart = new D3OrgChart(this.prEl.nativeElement);\r\n    //     // me.chart.render();\r\n\r\n    //     // me.chart.onNodeClick.subscribe(\r\n    //     //     (data: { id: string, node: ID3Node }) => {\r\n    //     //         console.log('Clicked: ', data)\r\n    //     //     }\r\n    //     // )\r\n    // }\r\n    //#endregion\r\n\r\n\r\n\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { BED3OrgchartComponent } from './components/orgchart/be-d3-orgchart.component';\r\n\r\n@NgModule({\r\n  declarations: [BED3OrgchartComponent],\r\n  imports: [\r\n  ],\r\n  exports: [BED3OrgchartComponent]\r\n})\r\nexport class BED3OrgchartModule { } \r\n","/*\r\n * Public API Surface of be-d3-orgchart\r\n */\r\n\r\nexport * from './lib/components';\r\nexport * from './lib/be-d3-orgchart.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["d3.select","d3.zoom","d3.stratify","d3.tree","d3.event","i0.ɵɵnamespaceSVG","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵtext","i0.ɵɵtemplate"],"mappings":"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"}