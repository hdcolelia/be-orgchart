{"version":3,"file":"be-orgchart.js","sources":["ng://be-orgchart/lib/assets/icons/error.base64.ts","ng://be-orgchart/lib/clasess/@items/basic/node-basic.ts","ng://be-orgchart/lib/clasess/d3x/d3x.ts","ng://be-orgchart/lib/clasess/d3-org-chart.class.ts","ng://be-orgchart/lib/components/orgchart/be-orgchart.component.ts","ng://be-orgchart/lib/be-orgchart.module.ts","ng://be-orgchart/public-api.ts","ng://be-orgchart/be-orgchart.ts"],"sourcesContent":["export const errorBase64Data = ``;\r\n\r\n","import * as d3 from 'd3';\r\nimport { ID3Node, IImageDef } from './../../../interfaces';\r\n\r\n// getting base64 icons\r\nimport { errorBase64Data } from './../../../assets/icons/error.base64';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport class D3NodeBasicParser {\r\n  constructor() { }\r\n  // dimensions\r\n  width: number = 240;\r\n  height: number = 100;\r\n\r\n  defaultImage?: IImageDef = {\r\n    type: 'link',\r\n    data: \"https://raw.githubusercontent.com/hdcolelia/be-orgchart/master/src/lib/assets/images/root.png\"\r\n  }\r\n\r\n  // error icon\r\n  errorBase64Icon = errorBase64Data;\r\n\r\n  imageDefs: { x: number, y: number, h: number, w: number, rx: number } = {\r\n    x: -20, y: -15, h: 60, w: 60, rx: 60\r\n  }\r\n\r\n  transitionDuration: number = 600;\r\n\r\n  protected addImage() {\r\n\r\n  }\r\n\r\n  drawNodes(\r\n    prGroup: d3.Selection<SVGGElement, d3.HierarchyPointNode<ID3Node>, any, any>,\r\n    prClickEvent: Subject<{ id: string, node: ID3Node }>\r\n  ) {\r\n    const me = this;\r\n\r\n    // adding rect\r\n    prGroup.append('rect').attr('class', 'node-rect')\r\n      .attr('width', me.width).attr('height', me.height)\r\n      .attr('stroke', 'blue').attr('stroke-width', 1)\r\n      .attr('fill', '#02B2AC').attr('rx', 12)\r\n      .on('click', (node) => {\r\n        prClickEvent.next({ id: node.data.nodeId, node: node.data });\r\n      })\r\n\r\n    // adding title\r\n    prGroup.append('text').append('tspan').text(d => d.data.title)\r\n      .attr('font-size', 15).attr('x', 50).attr('y', 25);\r\n\r\n    // adding description\r\n    prGroup.append('text').append('tspan').text(d => d.data.description)\r\n      .attr('font-size', 10).attr('x', 50).attr('y', 45);\r\n    // adding description\r\n    prGroup.append('text').text(d => d.data.nodeId)\r\n      .attr('font-size', 10).attr('x', 50).attr('y', 65);\r\n\r\n    // adding image\r\n    const imageUrl = (d: d3.HierarchyPointNode<ID3Node>) => {\r\n      if (d.data.nodeImage) return `url(#img-${d.data.nodeId})`;\r\n      if (me.defaultImage) return `url(#img-default-node-img)`;\r\n      return '';\r\n    }\r\n    prGroup.filter(d => imageUrl(d) != '')\r\n      .append('rect').attr('class', 'node-image')\r\n      .attr('x', me.imageDefs.x).attr('y', me.imageDefs.y)\r\n      .attr('width', me.imageDefs.w).attr('height', me.imageDefs.h)\r\n      .attr('fill', d => imageUrl(d)).attr('rx', me.imageDefs.rx)\r\n      .on('click', (node) => {\r\n        prClickEvent.next({ id: node.data.nodeId, node: node.data });\r\n      });\r\n  }\r\n\r\n}","import { max, min } from 'd3';\r\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\r\nimport { ID3Node, IIconDef, IImageDef } from './../../interfaces';\r\nimport { D3NodeBasicParser } from './../@items';\r\nimport * as d3 from 'd3';\r\n\r\nimport * as fa from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport interface IAttrs { [index: string]: string | number }\r\n\r\nexport const applyAttrs = (sel: d3.Selection<any, any, any, any>, attrs: IAttrs) => {\r\n  // applying  attrs\r\n  let currentSel = sel;\r\n  for (const key in attrs) {\r\n    const value = attrs[key];\r\n    currentSel = currentSel.attr(key, value);\r\n  }\r\n  return currentSel;\r\n}\r\n\r\nexport interface IDef {\r\n  type: string;\r\n  attrs: IAttrs;\r\n  components?: { [index: string]: IDef }\r\n}\r\n\r\nexport const addDefs = (container: d3.Selection<any, any, any, any>, defs: { [index: string]: IDef }) => {\r\n  // adding defs\r\n  for (const key in defs) {\r\n    const currentDef = defs[key];\r\n    const pattern = applyAttrs(container.append(currentDef.type).attr('id', key), currentDef.attrs)\r\n    for (const componentKey in currentDef.components) {\r\n      const componentDef = currentDef.components[componentKey];\r\n      const component = applyAttrs(\r\n        pattern.append(componentDef.type),\r\n        componentDef.attrs\r\n      )\r\n      if (componentDef.components) addDefs(component, componentDef.components);\r\n    }\r\n  }\r\n}\r\n\r\nexport const calcIconGTransform = (prIcon: IconDefinition, prScale: number): string => {\r\n  //defining variables\r\n  let traslateX: number = 0;\r\n  let traslateY: number = 0;\r\n  let scale: number = 1;\r\n  prScale = prScale || 1;\r\n\r\n  const iconWidth: number = +prIcon.icon[0];\r\n  const iconHeight: number = +prIcon.icon[1];\r\n\r\n  if ((iconWidth > iconHeight) || (iconWidth == iconHeight)) { // if width > height or equal\r\n    scale = (1 / iconWidth);\r\n    const margin = (iconWidth - iconHeight) / 2;\r\n    traslateY = margin * scale;\r\n    if (prScale != 1) {\r\n      traslateY += ((iconHeight * scale) - (iconHeight * scale * prScale)) / 2;\r\n      traslateX = (1 - prScale) / 2;\r\n    }\r\n  } else {\r\n    scale = (1 / iconHeight);\r\n    const margin = (iconHeight - iconWidth) / 2;\r\n    traslateX = margin * scale;\r\n    if (prScale != 1) {\r\n      traslateX += ((iconWidth * scale) - (iconWidth * scale * prScale)) / 2;\r\n      traslateY = (1 - prScale) / 2;\r\n    }\r\n  }\r\n\r\n  return `translate(${traslateX}, ${traslateY}) scale(${scale * prScale})`;\r\n}\r\n\r\nexport const calcGFit = (\r\n  prG: d3.Selection<SVGGElement, any, any, any>,\r\n  prContainer: d3.Selection<SVGElement, any, any, any>,\r\n  prRoot: d3.HierarchyPointNode<ID3Node>,\r\n  prNodeParser: D3NodeBasicParser,\r\n  prPadding: number = 50\r\n) => {\r\n  //defining variables\r\n  const cWidth: number = prContainer.node().getBoundingClientRect().width;\r\n  const cHeight: number = prContainer.node().getBoundingClientRect().height;\r\n  const gWidth: number = prG.node().getBBox().width; // adding margin\r\n  const gHeight: number = prG.node().getBBox().height; // adding margin\r\n\r\n  const scale = min([(cHeight / (gHeight + prPadding)), (cWidth / (gWidth + prPadding))]);\r\n\r\n  const minX = Math.abs(min(prRoot.descendants().map(current => current.x)) - (prNodeParser.width / 2));\r\n  const maxX = max(prRoot.descendants().map(current => current.x)) + (prNodeParser.width / 2);\r\n\r\n  const centerX = cWidth / 2;\r\n\r\n  const currentx = centerX + (((minX - maxX) * scale) / 2);\r\n  const currenty = ((cHeight - (gHeight * scale)) / 2);\r\n  // console.log(`Min X: ${minX} - Max X: ${maxX} - diff: ${minX - maxX} - center: ${currentx} - g sclae: ${gScale}`)\r\n  return { scale: scale, y: currenty, x: currentx };\r\n}\r\n\r\nexport const addDefaultDefs = (container: d3.Selection<any, any, any, any>, defs: { [index: string]: IIconDef | IImageDef }, prNodeParser: D3NodeBasicParser) => {\r\n  // adding defs\r\n  for (const key in defs) {\r\n    const currentDef = defs[key];\r\n    // creating pattern\r\n    const pattern = container.append('pattern');\r\n    setPattern(pattern, { nodeId: key, nodeImage: currentDef }, prNodeParser);\r\n  }\r\n}\r\n\r\n\r\nexport const addFaIconDefs = (container: d3.Selection<any, any, any, any>, defs: { [index: string]: IIconDef }) => {\r\n  // adding defs\r\n  for (const key in defs) {\r\n    const currentDef = defs[key];\r\n\r\n    currentDef.scale = currentDef.scale || 1;\r\n\r\n    // creating pattern\r\n    const pattern = applyAttrs(\r\n      container.append('pattern').attr('id', key),\r\n      {\r\n        width: '100%', height: '100%', patternContentUnits: 'objectBoundingBox'\r\n      }\r\n    );\r\n\r\n    // creating rect\r\n    const faIcon = fa[currentDef.name];\r\n\r\n    // creating g\r\n    const g = applyAttrs(pattern.append('g'), {\r\n      transform: calcIconGTransform(faIcon, currentDef.scale),\r\n      fill: currentDef.color\r\n    });\r\n\r\n    const sideSize = max([+faIcon.icon[0], +faIcon.icon[1]]) / currentDef.scale;\r\n    applyAttrs(g.append('rect'), {\r\n      fill: currentDef.backgroundColor,\r\n      x: -sideSize / 3,\r\n      y: -sideSize / 3,\r\n      width: (sideSize * 3),\r\n      height: (sideSize * 3)\r\n    })\r\n\r\n    // creating path\r\n    applyAttrs(g.append('path'), {\r\n      d: faIcon.icon[4] as string\r\n    })\r\n\r\n  }\r\n}\r\n\r\nconst imageLink = (nodeImage: IImageDef) => {\r\n  if (nodeImage && nodeImage.type == 'link') return nodeImage.data;\r\n  if (nodeImage && nodeImage.type == 'base64') return `data:image/png;base64,${nodeImage.data}`;\r\n  return '';\r\n}\r\n\r\nconst faIcon = (d: IIconDef) => {\r\n  if (!d || !(d.type == 'icon')) return null;\r\n  const icon: IconDefinition = fa[d.name];\r\n  return icon;\r\n}\r\n\r\nexport const setPattern = (prPattern: d3.Selection<any, any, any, any>, prNodeData: Partial<ID3Node>, prNodeParser: D3NodeBasicParser) => {\r\n  // configurin pattern\r\n  const link = imageLink(prNodeData.nodeImage as IImageDef);\r\n  if (link != '') {\r\n    prPattern\r\n      .attr('id', `img-${prNodeData.nodeId}`)\r\n      .attr('width', 1)\r\n      .attr('height', 1)\r\n      .append('image')\r\n      .attr('xlink:href', link)\r\n      .attr('width', prNodeParser.imageDefs.w)\r\n      .attr('height', prNodeParser.imageDefs.h)\r\n      .attr('preserveAspectRatio', 'xMidYMin slice');\r\n    return; // exit because image is priority\r\n  }\r\n\r\n  const icon = faIcon(prNodeData.nodeImage as IIconDef);\r\n  if (icon) {\r\n    const iconDef: IIconDef = prNodeData.nodeImage as IIconDef;\r\n    applyAttrs(prPattern, {\r\n      id: `img-${prNodeData.nodeId}`,\r\n      width: '100%',\r\n      height: '100%',\r\n      patternContentUnits: 'objectBoundingBox'\r\n    });\r\n\r\n    // creating g\r\n    const g = applyAttrs(prPattern.append('g'), {\r\n      transform: calcIconGTransform(icon, iconDef.scale || 0.8),\r\n      fill: iconDef.color || 'white'\r\n    });\r\n\r\n    // creating rect\r\n    const sideSize = max([+icon.icon[0], +icon.icon[1]]);\r\n    applyAttrs(g.append('rect'), {\r\n      fill: iconDef.backgroundColor || '#074EF3',\r\n      x: -sideSize / 2,\r\n      y: -sideSize / 2,\r\n      width: (sideSize * 2),\r\n      height: (sideSize * 2)\r\n    })\r\n\r\n    // creating path\r\n    applyAttrs(g.append('path'), {\r\n      d: icon.icon[4] as string\r\n    })\r\n\r\n    return; // exit because icon is second priority\r\n  }\r\n}\r\n\r\nexport interface IPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ISize {\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface IMaxMinX {\r\n  minx: number;\r\n  maxx: number;\r\n}\r\n\r\nexport interface IRootNode<T> extends d3.HierarchyPointNode<T> {\r\n  childrenWidth?: number;\r\n  minx?: number;\r\n  maxx?: number;\r\n  linkDirection?: 'top' | 'left' | 'right';\r\n}\r\n\r\n\r\nexport const lastChidrenLevel = (prRoot: IRootNode<ID3Node>): boolean => {\r\n  for (const current of prRoot.children) {\r\n    if (current.children) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n\r\nexport const buildTree = (prRoot: IRootNode<ID3Node>, nodeSize: ISize) => {\r\n  if (!prRoot.children || !prRoot.children.length) return;\r\n\r\n  //#region local Functions\r\n  const setChildrenPos = (prNode: IRootNode<ID3Node>, nodeSize: ISize) => {\r\n    prNode.minx = prNode.x;\r\n    prNode.maxx = prNode.x;\r\n\r\n    if (!prNode.children) return;\r\n\r\n    let startingX = prNode.x - ((prNode.children.length - 1) / 2) * nodeSize.w;\r\n    prNode.minx = startingX;\r\n\r\n    const lastLevel = lastChidrenLevel(prNode);\r\n\r\n    let distribution = prNode.data.childrenDist;\r\n    if (!lastLevel) distribution = \"horizontal\";\r\n\r\n    switch (distribution) {\r\n      case \"vertical\":\r\n        startingX = prNode.x - nodeSize.w / 2;\r\n        prNode.minx = startingX;\r\n        prNode.maxx = startingX + nodeSize.w;\r\n        let level = 0;\r\n        for (let index = 0; index < prNode.children.length; index++) {\r\n          const currentChild = prNode.children[index];\r\n          currentChild.x = startingX;\r\n          startingX += nodeSize.w;\r\n          currentChild.linkDirection = 'right';\r\n          currentChild.y = (currentChild.depth + level) * nodeSize.h;\r\n          if (index % 2 == 1) {\r\n            currentChild.linkDirection = 'left';\r\n            startingX = prNode.x - nodeSize.w / 2;\r\n            level++;\r\n          }\r\n        }\r\n        break;\r\n      case \"horizontal\":\r\n      default:\r\n        for (const currentChild of prNode.children || []) {\r\n          currentChild.x = startingX;\r\n          prNode.maxx = startingX;\r\n          startingX += nodeSize.w;\r\n          currentChild.linkDirection = 'top';\r\n          currentChild.y = currentChild.depth * nodeSize.h;\r\n          setChildrenPos(currentChild, nodeSize);\r\n        }\r\n        break;\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const moveNode = (prNode: IRootNode<ID3Node>, movex: number, positionOnParent: number, moveBrothers: boolean) => {\r\n    if (movex == 0) return;\r\n\r\n    prNode.minx += movex;\r\n    prNode.maxx += movex;\r\n    prNode.x += movex;\r\n    // console.log('Moving: ', prNode.data.nodeId, movex)\r\n    // if(!prNode.children) return;\r\n\r\n    for (let index = 0; index < (prNode.children || []).length; index++) {\r\n      const currentChild = prNode.children[index]\r\n      // currentChild.x += movex;\r\n      moveNode(currentChild, movex, index, false);\r\n    }\r\n\r\n    // moving brothers\r\n    if (!moveBrothers) return;\r\n    if (!prNode.parent) return;\r\n    const nextToMove = prNode.parent.children[positionOnParent + 1];\r\n    if (nextToMove) moveNode(nextToMove, movex, positionOnParent + 1, true);\r\n  }\r\n  //#endregion local Functions\r\n\r\n  // setting the first x / y position\r\n  setChildrenPos(prRoot, nodeSize);\r\n\r\n  const getrelativePosition = (current: number, length: number): number => {\r\n    const increment = 1 / length;\r\n    const pos = increment * current;\r\n\r\n    if (increment == 1) return 0; // middle\r\n    if (pos == 1) return 1; // middle\r\n    if (pos <= 0.5) return -1; // left\r\n    const prevPos = increment - (current - 1); // left\r\n    if (pos >= 0.5 && prevPos <= 0.5) return 0; // middle\r\n\r\n    return 1; // right    \r\n  }\r\n\r\n  const getNextNodeWithChildren = (prNode: IRootNode<ID3Node>, positionOnParent: number) => {\r\n    for (let index = positionOnParent; index < prNode.parent.children.length; index++) {\r\n      const child = prNode.parent.children[index];\r\n      if (child.children) return {\r\n        index: index,\r\n        node: child\r\n      }\r\n    }\r\n    return {\r\n      index: -1,\r\n      node: null\r\n    }\r\n  }\r\n\r\n\r\n  //analizamos las posiciones y corremos de ser necesario\r\n  let lastX: { defined: boolean, x: number } = { defined: false, x: 0 };\r\n  for (let index = 0; index < prRoot.children.length; index++) {\r\n    const currentChild = prRoot.children[index];\r\n\r\n    if (currentChild.children) {\r\n      // before anything\r\n      buildTree(currentChild, nodeSize)\r\n\r\n      if (!lastX.defined || currentChild.maxx > lastX.x) {\r\n        lastX.defined = true;\r\n        lastX.x = currentChild.maxx;\r\n      }\r\n\r\n      const position = getrelativePosition(index + 1, prRoot.children.length)\r\n      // to the left\r\n      const nextChild: { index: number, node: IRootNode<ID3Node> } = getNextNodeWithChildren(currentChild, index + 1); //prRoot.children[index+1];\r\n      if (!nextChild.node) continue;\r\n      let move: number;\r\n      if (nextChild.node.minx < (lastX.x + nodeSize.w)) {\r\n        move = (lastX.x + nodeSize.w) - nextChild.node.minx;\r\n        // console.log(`NODE: ${currentChild.data.nodeId} -> ${move}`)\r\n        moveNode(nextChild.node, move, nextChild.index, true)\r\n      }\r\n\r\n      // // let prevChild: IRootNode<ID3Node>, nextChild: IRootNode<ID3Node>;\r\n      // switch(position) {\r\n      //   case -1: // left\r\n      //     prevChild = prRoot.children[index-1];\r\n      //     if(!prevChild || !prevChild.children) continue;\r\n      //     move = (Math.abs(currentChild.minx - prevChild.maxx) + nodeSize.w) * -1; \r\n      //     moveNode(prevChild, move, index-1, true)   \r\n      //     break;\r\n      //   case 0: // center\r\n      //     prevChild = prRoot.children[index-1];\r\n      //     if(prevChild && prevChild.children) {\r\n      //       move = (Math.abs(currentChild.minx - prevChild.maxx) + nodeSize.w) * -1; \r\n      //       moveNode(prevChild, move, index-1, true)   \r\n      //     }\r\n\r\n      //     nextChild = prRoot.children[index+1];\r\n      //     if(!nextChild || !nextChild.children) continue;\r\n      //     move = (Math.abs(nextChild.minx - currentChild.maxx) + nodeSize.w); \r\n      //     moveNode(nextChild, move, index+1, true)\r\n      //     break;\r\n      //   case 1: // rigth\r\n      //     nextChild =  getBrotherWithChildren(currentChild, index, 1); //prRoot.children[index+1];\r\n      //     if(!nextChild || !nextChild.children) continue;\r\n      //     move = (Math.abs(nextChild.minx - currentChild.maxx) + nodeSize.w); \r\n      //     moveNode(nextChild, move, index+1, true)\r\n      //     break;\r\n      // }\r\n\r\n      // buildTree(currentChild, nodeSize)\r\n    }\r\n  }\r\n\r\n  // if root then put root in the middle\r\n  if (!prRoot.parent) {\r\n    const nodes: IRootNode<ID3Node>[] = [];\r\n    const getNodes = (prNode: IRootNode<ID3Node>) => {\r\n      nodes.push(prNode);\r\n      for (const currentNode of prNode.children || []) {\r\n        getNodes(currentNode)\r\n      }\r\n    }\r\n\r\n    getNodes(prRoot);\r\n\r\n    const minX = min(nodes.map(current => current.x));\r\n    const maxX = max(nodes.map(current => current.x));\r\n    const moveX = (Math.abs(minX) - Math.abs(maxX)) / 2;\r\n\r\n    //console.log('Centranding...: ', moveX);\r\n    moveNode(prRoot.children[0], moveX, 0, true);\r\n  }\r\n\r\n}","import * as d3 from 'd3';\r\nimport { ID3Node, IImageDef } from '../interfaces';\r\nimport { Subject, fromEvent } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { D3NodeBasicParser } from './@items';\r\n\r\nimport { calcGFit, setPattern, addDefaultDefs, buildTree, IRootNode } from './d3x/d3x';\r\nimport { BaseType } from 'd3';\r\n\r\nexport interface ID3OrgChartOptions {\r\n  nodeParser?: D3NodeBasicParser;\r\n  data?: ID3Node[];\r\n  backgroundColor?: string;\r\n  defaultFont?: string;\r\n  nodeHorizontalSpaceScale?: number;\r\n  nodeVerticalSpaceScale?: number;\r\n}\r\n\r\nexport class D3OrgChart {\r\n  //#region Default Options\r\n  protected options: ID3OrgChartOptions = {\r\n    backgroundColor: '#03A3C5',\r\n    nodeParser: new D3NodeBasicParser(),\r\n    data: [],\r\n    defaultFont: 'Tahoma',\r\n    nodeHorizontalSpaceScale: 0.5,\r\n    nodeVerticalSpaceScale: 0.8\r\n  }\r\n  //#endregion\r\n\r\n  //#region  NODE PARSER\r\n  protected _nodeParser: D3NodeBasicParser;\r\n  get nodeParser(): D3NodeBasicParser {\r\n    if (!this._nodeParser) this._nodeParser = new D3NodeBasicParser();\r\n    return this._nodeParser;\r\n  }\r\n  set nodeParser(parser: D3NodeBasicParser) {\r\n    this._nodeParser = parser;\r\n    // this.render();\r\n  }\r\n  //#endregion\r\n\r\n  //#region SVG components\r\n  protected container: d3.Selection<HTMLElement, any, any, any>;\r\n  protected svg: d3.Selection<SVGElement, unknown, HTMLElement, unknown>;\r\n  protected tb: d3.Selection<any, any, any, any>;\r\n\r\n  protected chart: d3.Selection<SVGGElement, any, BaseType, any>;\r\n  // protected centerG: d3.Selection<any, any, any, any>;\r\n  protected defs: d3.Selection<any, any, any, any>;\r\n\r\n  protected lastTransform: any;\r\n  //#endregion\r\n\r\n  //#region DATA\r\n  protected root: d3.HierarchyPointNode<ID3Node>;\r\n  // protected allNodes: any;\r\n\r\n  protected _data: ID3Node[] = [];\r\n  get data(): ID3Node[] {\r\n    return this._data || [];\r\n  }\r\n\r\n  set data(data: ID3Node[]) {\r\n    this._data = data;\r\n    // this.render()\r\n  }\r\n  //#endregion\r\n\r\n  zoomFunc = d3.zoom().scaleExtent([0.1, 20]).on(\"zoom\", d => this.zoomed());\r\n\r\n  currentZoom: number = 1;\r\n  treemap: d3.TreeLayout<ID3Node>;\r\n\r\n  constructor(prContainer: HTMLElement, prOptions?: ID3OrgChartOptions) {\r\n    const me = this;\r\n\r\n    // init container\r\n    me.container = d3.select(prContainer);\r\n\r\n    //If Data argument passed - then set it\r\n    if (prOptions?.data) me._data = prOptions.data;\r\n\r\n    // setting parser\r\n    me._nodeParser = prOptions?.nodeParser || me.options.nodeParser;\r\n\r\n    // applying options\r\n    me.options = Object.assign(me.options, prOptions);\r\n\r\n    // monitor resize\r\n    fromEvent(window, 'resize')\r\n      .pipe(\r\n        debounceTime(300)\r\n      ).subscribe(\r\n        () => {\r\n          // HDC - VER this.prepareCanvas();\r\n          this.render();\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    const me = this;\r\n    // preparing svg\r\n    me.prepareCanvas();\r\n\r\n    // if no data then return\r\n    if (!me.data.length) return;\r\n\r\n    // preparing data\r\n    me.prepareData();\r\n\r\n    // showing nodes\r\n    me.showNodes();\r\n    return this;\r\n  }\r\n\r\n  // preparing canvas\r\n  protected prepareCanvas() {\r\n    const me = this;\r\n\r\n    //Drawing containers\r\n    const containerRect = me.container.node().getBoundingClientRect();\r\n    me.svg = me.container.selectAll<SVGElement, any>('svg')\r\n      .data([{ id: 'svg' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter =>\r\n          enter\r\n            .append('svg')\r\n            .attr('class', 'svg-chart-container')\r\n            .attr('font-family', me.options.defaultFont)\r\n            // .call(d3.zoom().on(\"zoom\", d => this.zoomed()))\r\n            .call(this.zoomFunc)\r\n            .on(\"dblclick.zoom\", null)\r\n            .attr('cursor', 'move')\r\n            .style('background-color', me.options.backgroundColor),\r\n        update =>\r\n          update\r\n            .attr('width', containerRect.width)\r\n            .attr('height', containerRect.height)\r\n            .attr('font-family', me.options.defaultFont)\r\n            .style('background-color', me.options.backgroundColor)\r\n      );\r\n\r\n    //Add container g element\r\n    me.chart = me.svg.selectAll<SVGGElement, any>('g.chart')\r\n      .data([{ id: 'chart' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter => enter\r\n          .append('g')\r\n          .attr('class', 'chart')\r\n          .attr('transform', `translate(0,0)`),\r\n        update => update\r\n      )\r\n    if (!me.lastTransform)\r\n      me.svg.transition().duration(200).call(\r\n        me.zoomFunc.transform,\r\n        d3.zoomIdentity.translate(containerRect.width / 2, this.nodeParser.height).scale(1)\r\n      );\r\n\r\n    //Add container g element\r\n    me.tb = me.svg.selectAll('g.toolbar')\r\n      .data([{ id: 'toolbar' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter => enter\r\n          .append('g')\r\n          .attr('class', 'toolbar')\r\n          .attr('transform', `translate(10,10)`)\r\n          .append('rect')\r\n          .attr('width', 30)\r\n          .attr('height', 30)\r\n          .attr('fill', 'url(#img-fit-icon)')\r\n          .attr('cursor', 'pointer')\r\n          .on('click', () => me.fit()),\r\n        update => update\r\n      )\r\n    me.prepareDefs();\r\n  }\r\n\r\n  // preparing defs\r\n  prepareDefs() {\r\n    const me = this;\r\n    // defs\r\n    me.defs = me.svg.selectAll('defs.globalDefs')\r\n      .data([{ id: 'defs' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter => {\r\n          const defs = enter.append('defs').attr('class', 'globalDefs');\r\n          addDefaultDefs(defs, {\r\n            'expand-icon': {\r\n              type: 'icon',\r\n              backgroundColor: '#05C356',\r\n              scale: 0.6,\r\n              color: '#EAFA48',\r\n              name: 'faPlus'\r\n            },\r\n            'collapse-icon': {\r\n              type: 'icon',\r\n              backgroundColor: '#D10303',\r\n              scale: 0.6,\r\n              color: '#EAFA48',\r\n              name: 'faMinus'\r\n            },\r\n            'fit-icon': {\r\n              type: 'icon',\r\n              backgroundColor: '#074EF3',\r\n              scale: 0.9,\r\n              color: '#EAFA48',\r\n              name: 'faExpand'\r\n            },\r\n            'default-node-img': me.nodeParser.defaultImage as IImageDef\r\n          }, me.nodeParser)\r\n          //addDefs(defs, me.defsElements);\r\n          return defs\r\n        },\r\n        update => update\r\n      )\r\n  }\r\n\r\n  // preparing data\r\n  protected prepareData() {\r\n    const me = this;\r\n\r\n    // if no data return \r\n    if (!me.data.length) return;\r\n\r\n    // Convert flat data to hierarchical\r\n    if (!me.root) {\r\n      try { // preventing multiple root\r\n        me.root = d3.stratify<ID3Node>().id(({ nodeId }) => nodeId).parentId(({ parentNodeId }) => parentNodeId)\r\n          (me.data) as d3.HierarchyPointNode<ID3Node>;\r\n      } catch (err) {\r\n        me.root = d3.stratify<ID3Node>().id(({ nodeId }) => nodeId).parentId(({ parentNodeId }) => parentNodeId)\r\n          ([{\r\n            nodeId: 'root',\r\n            parentNodeId: '',\r\n            title: 'Error',\r\n            description: err.message || err,\r\n            nodeImage: {\r\n              type: 'base64',\r\n              data: me.nodeParser.errorBase64Icon\r\n            }\r\n          }]) as d3.HierarchyPointNode<ID3Node>;\r\n      }\r\n    }\r\n\r\n    // preparing treemap\r\n    const containerRect = me.container.node().getBoundingClientRect();\r\n    me.treemap = d3.tree<ID3Node>() //.size([containerRect.width || 250, containerRect.height])\r\n      .nodeSize([\r\n        (me.nodeParser.width + (this.nodeParser.width * me.options.nodeHorizontalSpaceScale || 0.5)) * 0,\r\n        (me.nodeParser.height + (this.nodeParser.height * me.options.nodeVerticalSpaceScale || 0.8)) * 0\r\n      ])\r\n      .separation((a: d3.HierarchyPointNode<ID3Node>, b: d3.HierarchyPointNode<ID3Node>) => {\r\n        return 1\r\n      })\r\n    // me.allNodes = me.treemap(me.root).descendants();\r\n    me.checkExpanded(me.root);\r\n  }\r\n\r\n  // showing nodes\r\n  protected showNodes(prNode: d3.HierarchyPointNode<ID3Node> = null) {\r\n    const me = this;\r\n\r\n    if (!prNode) prNode = me.root;\r\n    const nodeRef = {\r\n      x: prNode.x || 0,\r\n      y: prNode.y || 0,\r\n      parent: prNode.parent\r\n    };\r\n\r\n    // console.log('Node Before: ', nodeRef.x);\r\n    const updatePosition: { x: number, y: number } = {\r\n      x: prNode.x || 0,\r\n      y: prNode.y || 0\r\n    }\r\n\r\n    //  Assigns the x and y position for the nodes\r\n    const treeData = me.treemap(me.root);\r\n    // it is necesary for scope \r\n    const drawNodes = (container) => me.nodeParser.drawNodes(container, me.onNodeClick);\r\n    const drawCollapser = (nodeGroup: d3.Selection<SVGGElement, d3.HierarchyPointNode<ID3Node>, any, any>) => {\r\n      nodeGroup.append('circle')\r\n        .attr('class', 'collapser')\r\n        .attr('cx', me.nodeParser.width / 2)\r\n        .attr('cy', me.nodeParser.height)\r\n        .attr('r', 15)\r\n        .attr('stroke', 'black')\r\n        .attr('stroke-width', 2)\r\n        .on('click', (node) => {\r\n          // console.log('Node X: ', node.x)\r\n          d3.event.preventDefault();\r\n          me.expand(node, true);\r\n        });\r\n    };\r\n    // console.log('Node ref: ', prNode.x, nodeRef.x, nodeRef )\r\n    const nodes = treeData.descendants();\r\n\r\n    // probanding\r\n    buildTree(\r\n      me.root,\r\n      {\r\n        w: me.nodeParser.width + (this.nodeParser.width * me.options.nodeHorizontalSpaceScale || 0.5),\r\n        h: me.nodeParser.height + (this.nodeParser.height * me.options.nodeVerticalSpaceScale || 0.8)\r\n      }\r\n    );\r\n\r\n    // console.log('Nodes: ', nodes);\r\n    // preparing all definitions for nodes\r\n    me.defs.selectAll('pattern.node')\r\n      .data(nodes, (d: d3.HierarchyPointNode<ID3Node>) => d.data.nodeId)\r\n      .join(\r\n        enter =>\r\n          enter.filter(d => d.data.nodeImage != null)\r\n            .append('pattern').attr('class', 'node')\r\n            .each((nodeData, i, enterNodes) => {\r\n              // adding pattern\r\n              const pattern = d3.select(enterNodes[i]);\r\n              setPattern(pattern, nodeData.data, me.nodeParser);\r\n            }),\r\n        update => update,\r\n        exit => exit\r\n          .transition()\r\n          .duration(me.nodeParser.transitionDuration)\r\n          .style(\"opacity\", 0)\r\n          .remove()\r\n      )\r\n\r\n    // rendering nodes\r\n    const nodeStartPosition = (d: d3.HierarchyPointNode<ID3Node>) => {\r\n      if (nodeRef) {\r\n        return `translate(${nodeRef.x - (me.nodeParser.width / 2)},${nodeRef.y})`\r\n      }\r\n      if (!d.parent) return `translate(${d.x - (me.nodeParser.width / 2)},${d.y})`;\r\n      return `translate(${d.parent.x - (me.nodeParser.width / 2)},${d.parent.y})`\r\n    }\r\n\r\n    const nodePosition = (params: { x: number, y: number }) =>\r\n      `translate(${params.x - (me.nodeParser.width / 2)},${params.y})`;\r\n\r\n    const expandIconVisible =\r\n      (d: d3.HierarchyPointNode<ID3Node> & { _children?: any }) => (d.children || d._children) ? 'visible' : 'hidden';\r\n    const expandIcon =\r\n      (d: d3.HierarchyPointNode<ID3Node> & { _children?: any }) => expandIconVisible(d) == 'visible' ? (d.data.expanded ? `url(#img-collapse-icon)` : `url(#img-expand-icon)`) : '';\r\n\r\n\r\n    me.chart.selectAll('g.node')\r\n      .data(nodes, (d: d3.HierarchyPointNode<ID3Node>) => d.data.nodeId)\r\n      .join(\r\n        enter =>\r\n          enter.append('g')\r\n            .style(\"opacity\", 0)\r\n            .attr('class', 'node')\r\n            .attr('cursor', 'pointer')\r\n            .attr('transform', nodeStartPosition)\r\n            .call(drawNodes)\r\n            .call(drawCollapser)\r\n            .on('dblclick', (node) => {\r\n              const containerRect = me.container.node().getBoundingClientRect();\r\n              me.traslateTo((containerRect.width / 2) - node.x, ((containerRect.height - me.nodeParser.height) / 2) - node.y)\r\n            }),\r\n        update => update,\r\n        exit =>\r\n          exit\r\n            .transition()\r\n            .duration(me.nodeParser.transitionDuration)\r\n            .attr('transform', nodePosition(prNode))\r\n            .style(\"opacity\", 0)\r\n            .remove()\r\n      )\r\n      .transition().duration(me.nodeParser.transitionDuration)\r\n      .style(\"opacity\", 1)\r\n      .attr('transform', nodePosition)\r\n      .selectAll('circle.collapser')\r\n      .attr('visibility', expandIconVisible)\r\n      .attr('fill', expandIcon)\r\n\r\n    // rendering links\r\n    const pathStartingDiagonal = (d: { x: number, y: number, parent: IRootNode<ID3Node> }) => {\r\n      return this.linkPath(d, d)\r\n    }\r\n\r\n    const pathDiagonal = (d: IRootNode<ID3Node>) => {\r\n      const target = { x: d.parent.x, y: d.parent.y + me.nodeParser.height };\r\n      return this.linkPath(d, d.parent)\r\n    }\r\n\r\n    me.chart.selectAll('path.link')\r\n      .data(nodes.slice(1), (d: d3.HierarchyPointNode<ID3Node>) => d.data.nodeId)\r\n      .join(\r\n        enter =>\r\n          enter\r\n            .insert('path', 'g')\r\n            .attr('class', 'link')\r\n            .attr('fill', 'none')\r\n            .attr('stroke', 'blue')\r\n            .attr('stroke-width', 2)\r\n            .attr('d', pathStartingDiagonal(nodeRef)),\r\n        update => update,\r\n        exit =>\r\n          exit\r\n            .transition().duration(me.nodeParser.transitionDuration)\r\n            .attr('d', pathStartingDiagonal(prNode))\r\n            .remove()\r\n      )\r\n      .transition().duration(me.nodeParser.transitionDuration)\r\n      .attr('d', pathDiagonal);\r\n  }\r\n\r\n  // Zoom handler function\r\n  zoomed() {\r\n    const me = this;\r\n    // Saving d3 event's transform object\r\n    me.lastTransform = d3.event.transform;\r\n    // Reposition and rescale chart accordingly\r\n    me.chart.attr('transform', d3.event.transform);\r\n  }\r\n\r\n  //#region Events\r\n  // node click\r\n  onNodeClick: Subject<{ id: string, node: ID3Node }> = new Subject();\r\n  protected _onNodeClick(nodeId: string, node: ID3Node) {\r\n    this.onNodeClick.next({ id: nodeId, node: node });\r\n  }\r\n  //#endregion\r\n\r\n  // Generate custom diagonal - play with it here - https://observablehq.com/@bumbeishvili/curved-edges?collection=@bumbeishvili/work-components\r\n  linkPath(source: { x: number, y: number, parent: IRootNode<ID3Node> }, target: { x: number, y: number, parent: IRootNode<ID3Node> }) {\r\n    const me = this;\r\n\r\n    // Calculate some variables based on source and target (s,t) coordinates\r\n    let x = source.x;\r\n    let y = source.y;\r\n    const ex = target.x;\r\n    const ey = target.y + me.nodeParser.height;\r\n\r\n    const linkHeight = 25;\r\n    const curveRadius = Math.abs(x - ex) != 0 ? 15 : 0;\r\n\r\n    let xrvs = ex - x < 0 ? -1 : 1;\r\n    let yrvs = ey - y < 0 ? -1 : 1;\r\n    let w = Math.abs(ex - x) - (curveRadius * 2);\r\n\r\n    const path = `\r\n      M ${x} ${y}\r\n      L ${x} ${y + (linkHeight * yrvs)}\r\n      C ${x} ${y + ((linkHeight + curveRadius) * yrvs)} ${x} ${y + ((linkHeight + curveRadius) * yrvs)} ${x + (curveRadius * xrvs)} ${y + ((linkHeight + curveRadius) * yrvs)}\r\n      L ${x + ((w + curveRadius) * xrvs)} ${y + ((linkHeight + curveRadius) * yrvs)}\r\n      C ${ex}  ${y + ((linkHeight + curveRadius) * yrvs)} ${ex}  ${y + ((linkHeight + curveRadius) * yrvs)} ${ex} ${y + ((linkHeight + curveRadius) * yrvs) + (curveRadius * yrvs)}\r\n      L ${ex} ${ey}\r\n    `;\r\n    return path;\r\n  }\r\n\r\n  checkExpanded(node: d3.HierarchyPointNode<ID3Node> & { _children?: any }) {\r\n    const me = this;\r\n\r\n    // checking expanded\r\n    if (node.data.expanded) {\r\n      if (!node.children && node._children) {\r\n        node.children = node._children;\r\n        node._children = null;\r\n      }\r\n    } else { // collapsed\r\n      if (node.children) {\r\n        node._children = node.children;\r\n        node.children = null;\r\n      }\r\n    }\r\n    // checking children\r\n    (node.children || node._children || []).forEach(current => me.checkExpanded(current))\r\n  }\r\n\r\n  expand(node: d3.HierarchyPointNode<ID3Node> & { _children?: any }, toggle: boolean = false) { //,  render: boolean = false) {\r\n    const me = this;\r\n\r\n    const nodeRef = Object.assign(node);\r\n\r\n    // if toggle - lets toggle\r\n    if (toggle) node.data.expanded = !node.data.expanded;\r\n\r\n    // checking expanded\r\n    if (node.data.expanded) {\r\n      if (!node.children && node._children) {\r\n        node.children = node._children;\r\n        node._children = null;\r\n      }\r\n    } else { // collapsed\r\n      if (node.children) {\r\n        node._children = node.children;\r\n        node.children = null;\r\n      }\r\n    }\r\n\r\n    // expand(node.children, node.data.expanded);\r\n    // console.log('Before expand: ', nodeRef.x,  node.x)\r\n    if (toggle) me.showNodes(node);\r\n  }\r\n\r\n  traslateTo(prX, prY) {\r\n    const me = this;\r\n    me.svg\r\n      .transition().duration(me.nodeParser.transitionDuration)\r\n      .call(\r\n        me.zoomFunc.transform,\r\n        d3.zoomIdentity.translate(prX, prY)\r\n      );\r\n  }\r\n\r\n  fit() {\r\n    const me = this;\r\n    // const zoom = d3.zoom().on(\"zoom\", d => this.zoomed())\r\n\r\n    const fit = calcGFit(me.chart, me.svg, me.root, me.nodeParser)\r\n    me.svg.transition().duration(me.nodeParser.transitionDuration).call(\r\n      me.zoomFunc.transform,\r\n      d3.zoomIdentity.translate(fit.x, fit.y).scale(fit.scale)\r\n    );\r\n  }\r\n\r\n  setOptions(prOptions: Partial<ID3OrgChartOptions>) {\r\n    const me = this;\r\n    me.options = Object.assign(me.options, prOptions);\r\n  }\r\n}\r\n\r\n","import { Component, ElementRef, AfterViewInit, Input, Output, OnChanges, SimpleChanges, EventEmitter } from '@angular/core';\r\nimport { D3OrgChart, ID3OrgChartOptions } from '../../clasess/d3-org-chart.class';\r\nimport { ID3Node } from '../../interfaces';\r\nimport { D3NodeBasicParser } from '../../clasess/@items';\r\n\r\n@Component({\r\n    selector: 'be-orgchart',\r\n    templateUrl: './be-orgchart.component.html',\r\n    styleUrls: ['./be-orgchart.component.scss']\r\n})\r\nexport class BEOrgchartComponent implements AfterViewInit, OnChanges {\r\n    @Input() nodes: ID3Node[];\r\n    @Input() nodeParser: D3NodeBasicParser;\r\n    @Input() options: ID3OrgChartOptions;\r\n    @Output() onNodeClick: EventEmitter<ID3Node> = new EventEmitter();\r\n\r\n    //#region Chart\r\n    protected _chart: D3OrgChart;\r\n    get chart(): D3OrgChart {\r\n        const me = this;\r\n        if (!me._chart) {\r\n            const options: ID3OrgChartOptions = {};\r\n            // adding nodes if defined\r\n            if (me.nodes) options.data = me.nodes;\r\n            // adding node parser if defined\r\n            if (me.nodeParser) options.nodeParser = me.nodeParser;\r\n\r\n            me._chart = new D3OrgChart(this.prEl.nativeElement, options);\r\n        };\r\n        return me._chart;\r\n    }\r\n    //#endregion\r\n\r\n    constructor(protected prEl: ElementRef) { }\r\n\r\n    ngAfterViewInit() {\r\n        this.init()\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const me = this;\r\n\r\n        // detecting changes of input\r\n        if (changes.nodeParser && changes.nodeParser.currentValue) {\r\n            me.assignNodeParser(changes.nodeParser.currentValue);\r\n            me.chart.render();\r\n        }\r\n\r\n        if (changes.nodes && changes.nodes.currentValue) {\r\n            me.assignData(changes.nodes.currentValue as ID3Node[]);\r\n            me.chart.render();\r\n        }\r\n\r\n    }\r\n\r\n    init() {\r\n        const me = this;\r\n        // init the canvas\r\n        const chart = me.chart; // Must be like this to ensure chart init\r\n        me.chart.render();\r\n        // setting data\r\n        me.chart.onNodeClick.subscribe(\r\n            (data: { id: string, node: ID3Node }) => {\r\n                me.onNodeClick.next(data.node);\r\n            }\r\n        )\r\n    }\r\n\r\n    assignData(data: ID3Node[] | ID3Node, clear: boolean = true) {\r\n        const me = this;\r\n        const chart = me.chart; // Must be like this to ensure chart init\r\n        // if isn´t array we convert it in array\r\n        if (!(data instanceof Array)) data = [data];\r\n        if (clear) {\r\n            chart.data = data;\r\n            return;\r\n        }\r\n        // pushing data\r\n        chart.data = [...chart.data, ...data];\r\n        chart.render();\r\n    }\r\n\r\n    assignNodeParser(prParser: D3NodeBasicParser) {\r\n        const me = this;\r\n        const chart = me.chart; // Must be like this to ensure chart init\r\n        chart.nodeParser = prParser;\r\n        chart.render();\r\n    }\r\n\r\n    assignOptions(prOptions: Partial<ID3OrgChartOptions>) {\r\n        const me = this;\r\n        me.chart.setOptions(prOptions);\r\n    }\r\n\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { BEOrgchartComponent } from './components/orgchart/be-orgchart.component';\r\n// import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\n@NgModule({\r\n  declarations: [BEOrgchartComponent],\r\n  exports: [BEOrgchartComponent]\r\n})\r\nexport class BEOrgchartModule { } \r\n","/*\r\n * Public API Surface of be-d3-orgchart\r\n */\r\nexport * from './lib/clasess';\r\nexport * from './lib/components';\r\nexport * from './lib/interfaces';\r\nexport * from './lib/be-orgchart.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {BEOrgchartComponent as ɵa} from './lib/components/orgchart/be-orgchart.component';"],"names":["d3.zoom","d3.select","d3.zoomIdentity","d3.stratify","d3.tree","d3.event"],"mappings":"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"}