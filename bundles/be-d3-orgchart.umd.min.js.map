{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://be-d3-orgchart/lib/assets/icons/expand.base64.ts","ng://be-d3-orgchart/lib/clasess/@items/basic/node-basic.ts","ng://be-d3-orgchart/lib/assets/icons/collapse.base64.ts","ng://be-d3-orgchart/lib/assets/icons/error.base64.ts","ng://be-d3-orgchart/lib/clasess/d3-org-chart.class.ts","ng://be-d3-orgchart/lib/components/orgchart/be-d3-orgchart.component.ts","ng://be-d3-orgchart/lib/be-d3-orgchart.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","D3NodeBasicParser","this","width","height","expandBase64Icon","collapseBase64Icon","errorBase64Icon","imageDefs","x","y","h","w","rx","transitionDuration","prototype","addImage","drawNodes","prGroup","me","each","drawNode","prData","prIndex","node","append","attr","text","data","title","description","nodeImage","defs","nodeId","linkRef","url","icon","base64","xxxdrawNodes","updateNodes","prNodes","select","D3OrgChart","prContainer","prOptions","_this","options","backgroundColor","nodeParser","defaultFont","_data","currentZoom","onNodeClick","Subject","container","d3.select","_a","_nodeParser","_b","assign","fromEvent","window","pipe","debounceTime","subscribe","render","parser","prepareCanvas","prepareData","showNodes","containerRect","getBoundingClientRect","svg","selectAll","id","join","enter","d3.zoom","on","zoomed","style","update","chart","centerG","root","d3.stratify","parentId","parentNodeId","err","message","treemap","d3.tree","size","nodeSize","allNodes","descendants","checkExpanded","prNode","updatePosition","treeData","drawCollapser","nodeGroup","expand","nodes","nodeStartPosition","parent","nodePosition","params","expandIconVisible","children","_children","exit","transition","duration","remove","expanded","pathStartingDiagonal","linkPath","slice","insert","lastTransform","d3.event","transform","_onNodeClick","source","ex","ey","xrvs","yrvs","rInitial","Math","abs","forEach","current","toggle","BED3OrgchartComponent","prEl","_chart","nativeElement","ngAfterViewInit","init","ngOnChanges","changes","currentValue","assignNodeParser","assignData","console","log","clear","Array","concat","__spread","prParser","ElementRef","Input","Component","selector","template","BED3OrgchartModule","NgModule","declarations","imports","exports"],"mappings":";;;;;;;;;;;;;;oFAoDO,SAASA,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HC,EAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,EACrH,GAAuB,iBAAZQ,SAAoD,mBAArBA,QAAQC,SAAyBJ,EAAIG,QAAQC,SAASZ,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIU,EAAIb,EAAWO,OAAS,EAAGM,GAAK,EAAGA,KAAST,EAAIJ,EAAWa,MAAIL,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,GAChJ,OAAOH,EAAI,GAAKG,GAAKC,OAAOK,eAAeb,EAAQC,EAAKM,GAAIA,EAiEzD,SAASO,EAAOC,EAAGC,GACtB,IAAIC,EAAsB,mBAAXC,QAAyBH,EAAEG,OAAOC,UACjD,IAAKF,EAAG,OAAOF,EACf,IAAmBR,EAAYa,EAA3BR,EAAIK,EAAEI,KAAKN,GAAOO,EAAK,GAC3B,IACI,WAAc,IAANN,GAAgBA,KAAM,MAAQT,EAAIK,EAAEW,QAAQC,MAAMF,EAAGG,KAAKlB,EAAEmB,OAExE,MAAOC,GAASP,EAAI,CAAEO,MAAOA,GACjC,QACQ,IACQpB,IAAMA,EAAEiB,OAASP,EAAIL,EAAU,SAAIK,EAAEI,KAAKT,GAE1D,QAAkB,GAAIQ,EAAG,MAAMA,EAAEO,OAE7B,OAAOL,ECvIJ,ICIPM,EAAA,WAME,SAAAA,IAEAC,KAAAC,MAAgB,IAChBD,KAAAE,OAAiB,GAGjBF,KAAAG,iBDhB8B,un8CCiB9BH,KAAAI,mBCjBgC,+olCDoBhCJ,KAAAK,gBEpB6B,mw8DFsB7BL,KAAAM,UAAwE,CACtEC,GAAI,GAAIC,GAAI,GAAIC,EAAG,GAAIC,EAAG,GAAIC,GAAI,GAGpCX,KAAAY,mBAA6B,IA6G/B,OA3GYb,EAAAc,UAAAC,SAAV,aAIAf,EAAAc,UAAAE,UAAA,SACEC,GAEA,IAAMC,EAAKjB,KACXgB,EAAQE,MAAK,SAAC5C,EAAGS,GAAM,OAAAkC,EAAGE,SAAS7C,EAAGS,EAAGiC,OAG3CjB,EAAAc,UAAAM,SAAA,SAASC,EAAwCC,EAAiBC,GAChE,IAAML,EAAKjB,KAkBX,GAfAsB,EAAKC,OAAO,QAAQC,KAAK,QAAS,aAC/BA,KAAK,QAASP,EAAGhB,OAAOuB,KAAK,SAAUP,EAAGf,QAC1CsB,KAAK,SAAU,QAAQA,KAAK,eAAgB,GAC5CA,KAAK,OAAQ,WAAWA,KAAK,KAAM,IAGtCF,EAAKC,OAAO,QAAQE,MAAK,SAAAnD,GAAK,OAAAA,EAAEoD,KAAKC,SAClCH,KAAK,YAAa,IAAIA,KAAK,IAAK,IAAIA,KAAK,IAAK,IAGjDF,EAAKC,OAAO,QAAQE,MAAK,SAAAnD,GAAK,OAAAA,EAAEoD,KAAKE,eAClCJ,KAAK,YAAa,IAAIA,KAAK,IAAK,IAAIA,KAAK,IAAK,IAI9CJ,EAAOM,KAAKG,UAAW,CACxB,IAAMC,EAAOR,EAAKC,OAAO,QAAQA,OAAO,WACrCC,KAAK,MAAM,SAAAlD,GAAK,MAAA,OAAOA,EAAEoD,KAAKK,UAC9BP,KAAK,QAAS,GACdA,KAAK,SAAU,GAEdQ,EAAkB,GACnBZ,EAAOM,KAAKG,UAAUI,MAAKD,EAAUZ,EAAOM,KAAKG,UAAUI,KAC3Db,EAAOM,KAAKG,UAAUK,OAAMF,EAAUZ,EAAOM,KAAKG,UAAUK,MAC5Dd,EAAOM,KAAKG,UAAUM,SAAQH,EAAU,yBAAyBZ,EAAOM,KAAKG,UAAUM,QAE5EL,EAAKP,OAAO,SACvBC,KAAK,aAAcQ,GACnBR,KAAK,QAASP,EAAGX,UAAUI,GAC3Bc,KAAK,SAAUP,EAAGX,UAAUG,GAG9Be,KAAK,sBAAuB,kBAE7BF,EAAKC,OAAO,QAAQC,KAAK,QAAS,cACjCA,KAAK,IAAKP,EAAGX,UAAUC,GAAGiB,KAAK,IAAKP,EAAGX,UAAUE,GACjDgB,KAAK,QAASP,EAAGX,UAAUI,GAAGc,KAAK,SAAUP,EAAGX,UAAUG,GAE1De,KAAK,QAAQ,SAAAlD,GAAK,MAAA,YAAYA,EAAEoD,KAAKK,OAAM,OAAKP,KAAK,KAAMP,EAAGX,UAAUK,MAI7EZ,EAAAc,UAAAuB,aAAA,SACEpB,GAGAA,EACGO,OAAO,QACPA,OAAO,WACPC,KAAK,MAAM,SAAAlD,GAAK,MAAA,OAAOA,EAAEoD,KAAKK,UAC9BP,KAAK,QAAS,IACdA,KAAK,SAAU,IACfD,OAAO,SACPC,KAAK,cAAc,SAAAlD,GAAK,OAAAA,EAAEoD,KAAKG,UAAUI,OACzCT,KAAK,QAAS,IACdA,KAAK,SAAU,IAGlBR,EAAQO,OAAO,QAAQC,KAAK,QAAS,aAClCA,KAAK,QAdGxB,KAcSC,OAAOuB,KAAK,SAdrBxB,KAckCE,QAC1CsB,KAAK,SAAU,QAAQA,KAAK,eAAgB,GAC5CA,KAAK,OAAQ,QAAQA,KAAK,KAAM,IAGnCR,EAAQO,OAAO,QAAQE,MAAK,SAAAnD,GAAK,OAAAA,EAAEoD,KAAKC,SACrCH,KAAK,YAAa,IAAIA,KAAK,IAAK,IAAIA,KAAK,IAAK,IAGjDR,EAAQO,OAAO,QAAQE,MAAK,SAAAnD,GAAK,OAAAA,EAAEoD,KAAKE,eACrCJ,KAAK,YAAa,IAAIA,KAAK,IAAK,IAAIA,KAAK,IAAK,IAGjDR,EAAQO,OAAO,QAAQC,KAAK,QAAS,cAClCA,KAAK,IAAK,GAAGA,KAAK,IAAK,IACvBA,KAAK,QAAS,IAAIA,KAAK,SAAU,IACjCA,KAAK,QAAQ,SAAAlD,GAAK,MAAA,YAAYA,EAAEoD,KAAKK,OAAM,QAKhDhC,EAAAc,UAAAwB,YAAA,SAAYrB,EAAmDsB,GAC7DtB,EAAQuB,OAAO,kBAAkBf,KAAK,OAAQ,UAWlDzB,EAnIA,GGHAyC,EAAA,WAuEE,SAAAA,EAAYC,EAA0BC,GAAtC,QAAAC,EAAA3C,KA/CUA,KAAA4C,QAA8B,CACtCC,gBAAiB,UACjBC,WAAY,IAAI/C,EAChB2B,KAAM,GACNqB,YAAa,UAkBL/C,KAAAgD,MAAmB,GAsB7BhD,KAAAiD,YAAsB,EA4RtBjD,KAAAkD,YAAsD,IAAIC,EAAAA,QAxRxD,IAAMlC,EAAKjB,KAGXiB,EAAGmC,UAAYC,EAAAA,OAAUZ,IAGZ,QAAba,EAAIZ,SAAS,IAAAY,OAAA,EAAAA,EAAE5B,QAAMT,EAAG+B,MAAQN,EAAUhB,MAG1CT,EAAGsC,aAAuB,QAATC,EAAAd,SAAS,IAAAc,OAAA,EAAAA,EAAEV,aAAc7B,EAAG2B,QAAQE,WAGrD7B,EAAG2B,QAAUjE,OAAO8E,OAAOxC,EAAG2B,QAASF,GAGvCgB,EAAAA,UAAUC,OAAQ,UACfC,KACCC,EAAAA,aAAa,MACbC,WACA,WAEEnB,EAAKoB,YAoWf,OAlZEpF,OAAAK,eAAIwD,EAAA3B,UAAA,OAAI,KAAR,WACE,OAAOb,KAAKgD,OAAS,QAGvB,SAAStB,GACP1B,KAAKgD,MAAQtB,mCAOf/C,OAAAK,eAAIwD,EAAA3B,UAAA,aAAU,KAAd,WACE,OAAOb,KAAKuD,iBAEd,SAAeS,GACbhE,KAAKuD,YAAcS,mCAmCrBxB,EAAA3B,UAAAkD,OAAA,WAME,GALW/D,KAERiE,gBAFQjE,KAKH0B,KAAKjD,OAOb,OAZWuB,KAQRkE,cARQlE,KAWRmE,YACInE,MAICwC,EAAA3B,UAAAoD,cAAV,WAAA,IAAAtB,EAAA3C,KACQiB,EAAKjB,KAGLoE,EAAgBnD,EAAGmC,UAAU9B,OAAO+C,wBAC1CpD,EAAGqD,IAAMrD,EAAGmC,UAAUmB,UAAU,OAC7B7C,KAAK,CAAC,CAAE8C,GAAI,SAAU,SAAClG,GAAsB,OAAAA,EAAEkG,MAC/CC,MACC,SAAAC,GAAS,OAAAA,EACNnD,OAAO,OACPC,KAAK,QAAS,uBACdA,KAAK,cAAeP,EAAG2B,QAAQG,aAC/BvD,KAAKmF,EAAAA,OAAUC,GAAG,QAAQ,SAAAtG,GAAK,OAAAqE,EAAKkC,aACpCrD,KAAK,SAAU,QACfsD,MAAM,mBAAoB7D,EAAG2B,QAAQC,oBACxC,SAAAkC,GACE,OAAAA,EACGvD,KAAK,QAAS4C,EAAcnE,OAC5BuB,KAAK,SAAU4C,EAAclE,WAGtCe,EAAG+D,MAAQ/D,EAAGqD,IAAIC,UAAU,WACzB7C,KAAK,CAAC,CAAE8C,GAAI,WAAY,SAAClG,GAAsB,OAAAA,EAAEkG,MACjDC,MACC,SAAAC,GAAS,OAAAA,EACNnD,OAAO,KACPC,KAAK,QAAS,SACdA,KAAK,YAAa,qBACrB,SAAAuD,GAAU,OAAAA,KAId9D,EAAGgE,QAAUhE,EAAG+D,MAAMT,UAAU,kBAC7B7C,KAAK,CAAC,CAAE8C,GAAI,kBAAmB,SAAClG,GAAsB,OAAAA,EAAEkG,MACxDC,MACC,SAAAC,GAAS,OAAAA,EAAMnD,OAAO,KACnBC,KAAK,QAAS,mBACjB,SAAAuD,GACE,OAAAA,EACGvD,KAAK,YAAa,aAAa4C,EAAcnE,MAAQ,EAAC,IAAI0C,EAAKG,WAAW5C,OAAM,WAAWyC,EAAKM,YAAW,QAIpHhC,EAAGa,KAAOb,EAAGqD,IAAIC,UAAU,mBACxB7C,KAAK,CAAC,CAAE8C,GAAI,UAAW,SAAClG,GAAsB,OAAAA,EAAEkG,MAChDC,MACC,SAAAC,GACE,IAAM5C,EAAO4C,EAAMnD,OAAO,QAAQC,KAAK,QAAS,cAyBhD,OAxBAM,EAAKP,OAAO,WACTC,KAAK,KAAM,cACXA,KAAK,QAAS,GAAGA,KAAK,SAAU,GAChCD,OAAO,SACPC,KAAK,aAAc,yBAA2BP,EAAG6B,WAAW3C,kBAC5DqB,KAAK,QAAS,IACdA,KAAK,SAAU,IACfA,KAAK,sBAAuB,kBAC/BM,EAAKP,OAAO,WACTC,KAAK,KAAM,gBACXA,KAAK,QAAS,GAAGA,KAAK,SAAU,GAChCD,OAAO,SACPC,KAAK,aAAc,yBAA2BP,EAAG6B,WAAW1C,oBAC5DoB,KAAK,QAAS,IACdA,KAAK,SAAU,IACfA,KAAK,sBAAuB,kBASxBM,KAET,SAAAiD,GAAU,OAAAA,MAKNvC,EAAA3B,UAAAqD,YAAV,WACE,IAAMjD,EAAKjB,KAGX,GAAKiB,EAAGS,KAAKjD,OAAb,CAGA,IAAKwC,EAAGiE,KACN,IACEjE,EAAGiE,KAAOC,EAAAA,WAAuBX,IAAG,SAAClB,GAAe,OAAbA,EAAAvB,UAAqBqD,UAAS,SAAC9B,GAAqB,OAAnBA,EAAA+B,eAA9DF,CACTlE,EAAGS,MACJ,MAAO4D,GACPrE,EAAGiE,KAAOC,EAAAA,WAAuBX,IAAG,SAAClB,GAAe,OAAbA,EAAAvB,UAAqBqD,UAAS,SAAC9B,GAAqB,OAAnBA,EAAA+B,eAA9DF,CACT,CAAC,CACApD,OAAQ,OACRsD,aAAc,GACd1D,MAAO,QACPC,YAAa0D,EAAIC,SAAWD,EAC5BzD,UAAW,CACTM,OAAQlB,EAAG6B,WAAWzC,oBAO9B,IAAM+D,EAAgBnD,EAAGmC,UAAU9B,OAAO+C,wBAC1CpD,EAAGuE,QAAUC,EAAAA,OAAmBC,KAAK,CAACtB,EAAcnE,OAAS,IAAKmE,EAAclE,SAC7EyF,SAAS,CAAC3F,KAAK8C,WAAW7C,MAAQD,KAAK8C,WAAW7C,MAAQ,EAAGD,KAAK8C,WAAW5C,OAASF,KAAK8C,WAAW5C,OAAS,MAElHe,EAAG2E,SAAW3E,EAAGuE,QAAQvE,EAAGiE,MAAMW,cAClC5E,EAAG6E,cAAc7E,EAAGiE,QAIZ1C,EAAA3B,UAAAsD,UAAV,SAAoB4B,GAApB,IAAApD,EAAA3C,UAAoB,IAAA+F,IAAAA,EAAA,MAClB,IAAM9E,EAAKjB,KAEN+F,IAAQA,EAAS9E,EAAGiE,MACzB,IAAMc,EAA2C,CAC/CzF,EAAGwF,EAAOxF,EACVC,EAAGuF,EAAOvF,GAINyF,EAAWhF,EAAGuE,QAAQvE,EAAGiE,MAEzBnE,EAAY,SAACqC,GAAc,OAAAnC,EAAG6B,WAAW/B,UAAUqC,IACnD8C,EAAgB,SAACC,GACrBA,EAAUjF,MAAK,SAAC5C,EAAGS,GAEjBoH,EAAU5E,OAAO,UACdC,KAAK,QAAS,aACdA,KAAK,KAAMP,EAAG6B,WAAW7C,MAAQ,GACjCuB,KAAK,KAAMP,EAAG6B,WAAW5C,QACzBsB,KAAK,IAAK,IACVA,KAAK,SAAU,SACfA,KAAK,eAAgB,GACrBoD,GAAG,SAAS,SAACtD,GACZL,EAAGmF,OAAO9E,GAAM,UAKlB+E,EAAQJ,EAASJ,cAIjBS,EAAoB,SAAChI,GACzB,OAAIyH,EACK,cAAaC,EAAezF,EAAKU,EAAG6B,WAAW7C,MAAQ,GAAE,IAAI+F,EAAexF,EAAC,IAEjFlC,EAAEiI,OACA,cAAajI,EAAEiI,OAAOhG,EAAKU,EAAG6B,WAAW7C,MAAQ,GAAE,IAAI3B,EAAEiI,OAAO/F,EAAC,IADlD,cAAalC,EAAEiC,EAAKU,EAAG6B,WAAW7C,MAAQ,GAAE,IAAI3B,EAAEkC,EAAC,KAIrEgG,EAAe,SAACC,GACpB,MAAA,cAAaA,EAAOlG,EAAKU,EAAG6B,WAAW7C,MAAQ,GAAE,IAAIwG,EAAOjG,EAAC,KAEzDkG,EACJ,SAACpI,GAA4D,OAACA,EAAEqI,UAAYrI,EAAEsI,UAAa,UAAY,UAKzG3F,EAAGgE,QAAQV,UAAU,UAClB7C,KAAK2E,GAAO,SAAC/H,GAAsC,OAAAA,EAAEoD,KAAKK,UAC1D0C,MACC,SAAAC,GACE,OAAAA,EAAMnD,OAAO,KACVuD,MAAM,UAAW,GACjBtD,KAAK,QAAS,QACdA,KAAK,SAAU,WACfA,KAAK,YAAa8E,GAClB9G,KAAKuB,GACLvB,KAAK0G,GACLtB,GAAG,SAAS,SAACtD,GACZL,EAAGiC,YAAYxD,KAAK,CAAE8E,GAAIlD,EAAKI,KAAKK,OAAQT,KAAMA,EAAKI,aAE7D,SAAAqD,GAAU,OAAAA,KACV,SAAA8B,GACE,OAAAA,EACGC,aACAC,SAAS9F,EAAG6B,WAAWlC,oBACvBY,KAAK,YAAagF,EAAaT,IAC/BjB,MAAM,UAAW,GACjBkC,YAENF,aAAaC,SAAS9F,EAAG6B,WAAWlC,oBACpCkE,MAAM,UAAW,GACjBtD,KAAK,YAAagF,GAClBjC,UAAU,oBACV/C,KAAK,aAAckF,GACnBlF,KAAK,QA/BN,SAAClD,GAA4D,MAAwB,WAAxBoI,EAAkBpI,GAAmBA,EAAEoD,KAAKuF,SAAW,qBAAuB,mBAAsB,MAkCnK,IAAMC,EAAuB,SAACT,GAC5B,IAAMtI,EAAS,CAAEoC,EAAGkG,EAAOlG,EAAGC,EAAGiG,EAAOjG,EAAIS,EAAG6B,WAAW5C,QAC1D,OAAOyC,EAAKwE,SAAShJ,EAAQA,IAQ/B8C,EAAGgE,QAAQV,UAAU,aAClB7C,KAAK2E,EAAMe,MAAM,IAAI,SAAC9I,GAAsC,OAAAA,EAAEoD,KAAKK,UACnE0C,MACC,SAAAC,GACE,OAAAA,EACG2C,OAAO,OAAQ,KACf7F,KAAK,QAAS,QACdA,KAAK,OAAQ,QACbA,KAAK,SAAU,QACfA,KAAK,eAAgB,GACrBA,KAAK,IAAK0F,EAAqB,CAAE3G,EAAGyF,EAAezF,EAAGC,EAAGwF,EAAexF,QAC7E,SAAAuE,GAAU,OAAAA,KACV,SAAA8B,GACE,OAAAA,EACGC,aAAaC,SAAS9F,EAAG6B,WAAWlC,oBACpCY,KAAK,IAAK0F,EAAqBnB,IAC/BiB,YAENF,aAAaC,SAAS9F,EAAG6B,WAAWlC,oBACpCY,KAAK,KAxBa,SAAClD,GACpB,IAAMH,EAAS,CAAEoC,EAAGjC,EAAEiI,OAAOhG,EAAGC,EAAGlC,EAAEiI,OAAO/F,EAAIS,EAAG6B,WAAW5C,QAC9D,OAAOyC,EAAKwE,SAAS7I,EAAGH,OA0B5BqE,EAAA3B,UAAAgE,OAAA,WACa7E,KAERsH,cAAgBC,EAAAA,MAASC,UAFjBxH,KAIRgF,MAAMxD,KAAK,YAJHxB,KAImBsH,gBAKtB9E,EAAA3B,UAAA4G,aAAV,SAAuB1F,EAAgBT,GACrCtB,KAAKkD,YAAYxD,KAAK,CAAE8E,GAAIzC,EAAQT,KAAMA,KAW5CkB,EAAA3B,UAAAsG,SAAA,SAASO,EAAkCvJ,GAGzC,IAAMoC,EAAImH,EAAOnH,EACXC,EAAIkH,EAAOlH,EACXmH,EAAKxJ,EAAOoC,EACZqH,EAAKzJ,EAAOqC,EAEdqH,EAAOF,EAAKpH,EAAI,GAAK,EAAI,EACzBuH,EAAOF,EAAKpH,EAAI,GAAK,EAAI,EAEzBuH,EAAWC,KAAKC,IAAIN,EAAKpH,GAAK,EADvB,GACkCyH,KAAKC,IAAIN,EAAKpH,GAAK,EADrD,GAEP7B,EAAIsJ,KAAKC,IAAIL,EAAKpH,GAAK,EAAIuH,EAAWC,KAAKC,IAAIL,EAAKpH,GAAK,EAAIuH,EAC7DtH,EAAIuH,KAAKC,IAAIL,EAAKpH,GAAK,EAAI9B,EAa/B,MATa,mBACD6B,EAAC,IAAIC,EAAC,mBACND,EAAC,KAAIC,EAAIC,EAAIqH,GAAI,oBAChBvH,EAAC,KAAIC,EAAIC,EAAIqH,EAAOpJ,EAAIoJ,GAAI,IAAIvH,EAAC,KAAIC,EAAIC,EAAIqH,EAAOpJ,EAAIoJ,GAAI,KAAIvH,EAAI7B,EAAImJ,GAAI,KAAIrH,EAAIC,EAAIqH,EAAOpJ,EAAIoJ,GAAI,oBACxGvH,GAPJyH,KAAKC,IAAIN,EAAKpH,GAAS,EAAJ7B,GAOPmJ,EAAOnJ,EAAImJ,GAAI,KAAIrH,EAAIC,EAAIqH,EAAOpJ,EAAIoJ,GAAI,mBAClDH,EAAE,MAAKnH,EAAIC,EAAIqH,EAAOpJ,EAAIoJ,GAAI,IAAIH,EAAE,MAAKnH,EAAIC,EAAIqH,EAAOpJ,EAAIoJ,GAAI,IAAIH,EAAE,KAAIC,EAAKnH,EAAIqH,GAAI,mBACvFH,EAAE,IAAIC,EAAE,gBAMtBpF,EAAA3B,UAAAiF,cAAA,SAAcxE,GACZ,IAAML,EAAKjB,KAGPsB,EAAKI,KAAKuF,UACP3F,EAAKqF,UAAYrF,EAAKsF,YACzBtF,EAAKqF,SAAWrF,EAAKsF,UACrBtF,EAAKsF,UAAY,MAGftF,EAAKqF,WACPrF,EAAKsF,UAAYtF,EAAKqF,SACtBrF,EAAKqF,SAAW,OAInBrF,EAAKqF,UAAYrF,EAAKsF,WAAa,IAAIsB,SAAQ,SAAAC,GAAW,OAAAlH,EAAG6E,cAAcqC,OAK9E3F,EAAA3B,UAAAuF,OAAA,SAAO9E,EAA4D8G,QAAA,IAAAA,IAAAA,GAAA,GAI7DA,IAAQ9G,EAAKI,KAAKuF,UAAY3F,EAAKI,KAAKuF,UAGxC3F,EAAKI,KAAKuF,UACP3F,EAAKqF,UAAYrF,EAAKsF,YACzBtF,EAAKqF,SAAWrF,EAAKsF,UACrBtF,EAAKsF,UAAY,MAGftF,EAAKqF,WACPrF,EAAKsF,UAAYtF,EAAKqF,SACtBrF,EAAKqF,SAAW,MAgBhByB,GA9BOpI,KA8BImE,UAAU7C,IAG7BkB,EAjcA,gBC8BI,SAAA6F,EAAsBC,GAAAtI,KAAAsI,KAAAA,EA0F1B,OAzGI3J,OAAAK,eAAIqJ,EAAAxH,UAAA,QAAK,KAAT,WACI,IAAMI,EAAKjB,KACX,IAAKiB,EAAGsH,OAAQ,CACZ,IAAM3F,EAA8B,GAEhC3B,EAAGoF,QAAOzD,EAAQlB,KAAOT,EAAGoF,OAE5BpF,EAAG6B,aAAYF,EAAQE,WAAa7B,EAAG6B,YAE3C7B,EAAGsH,OAAS,IAAI/F,EAAWxC,KAAKsI,KAAKE,cAAe5F,GAExD,OAAO3B,EAAGsH,wCAMdF,EAAAxH,UAAA4H,gBAAA,WACIzI,KAAK0I,QAGTL,EAAAxH,UAAA8H,YAAA,SAAYC,GAIJA,EAAQ9F,YAAc8F,EAAQ9F,WAAW+F,eAHlC7I,KAIJ8I,iBAAiBF,EAAQ9F,WAAW+F,cAJhC7I,KAKJgF,MAAMjB,UAGT6E,EAAQvC,OAASuC,EAAQvC,MAAMwC,eARxB7I,KASJ+I,WAAWH,EAAQvC,MAAMwC,cATrB7I,KAUJgF,MAAMjB,WAKjBsE,EAAAxH,UAAA6H,KAAA,WACe1I,KAEMgF,MAFNhF,KAGRgF,MAAMjB,SAHE/D,KAKRgF,MAAM9B,YAAYY,WACjB,SAACpC,GACGsH,QAAQC,IAAI,YAAavH,OAKrC2G,EAAAxH,UAAAkI,WAAA,SAAWrH,EAA2BwH,QAAA,IAAAA,IAAAA,GAAA,GAClC,IACMlE,EADKhF,KACMgF,MAEXtD,aAAgByH,QAAQzH,EAAO,CAACA,IAClCwH,EACAlE,EAAMtD,KAAOA,GAIjBsD,EAAMtD,KN8DP,WACH,IAAK,IAAIjC,EAAK,GAAIV,EAAI,EAAGA,EAAIP,UAAUC,OAAQM,IAC3CU,EAAKA,EAAG2J,OAAOnK,EAAOT,UAAUO,KACpC,OAAOU,EMjEO4J,CAAOrE,EAAMtD,KAASA,GAChCsD,EAAMjB,WAGVsE,EAAAxH,UAAAiI,iBAAA,SAAiBQ,GACb,IACMtE,EADKhF,KACMgF,MACjBA,EAAMlC,WAAawG,EACnBtE,EAAMjB,mDArDkBwF,EAAAA,cApBnBtL,EAAA,CAARuL,EAAAA,qCACQvL,EAAA,CAARuL,EAAAA,0CAFQnB,EAAqBpK,EAAA,CALjCwL,EAAAA,UAAU,CACPC,SAAU,iBACVC,SAAA,y1CAGStB,mBCDb,SAAAuB,KAAkC,OAArBA,EAAkB3L,EAAA,CAN9B4L,EAAAA,SAAS,CACRC,aAAc,CAACzB,GACf0B,QAAS,GAETC,QAAS,CAAC3B,MAECuB","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export const expandBase64Data = ``;\r\n\r\n","import * as d3 from 'd3';\r\nimport { ID3Node } from './../../../interfaces';\r\n\r\n// getting base64 icons\r\nimport { expandBase64Data } from './../../../assets/icons/expand.base64';\r\nimport { collapseBase64Data } from './../../../assets/icons/collapse.base64';\r\nimport { errorBase64Data } from './../../../assets/icons/error.base64';\r\n\r\n\r\nexport class D3NodeBasicParser {\r\n  constructor() { }\r\n  // dimensions\r\n  width: number = 220;\r\n  height: number = 80;\r\n\r\n  // expand / colapse icons\r\n  expandBase64Icon = expandBase64Data;\r\n  collapseBase64Icon = collapseBase64Data;\r\n\r\n  // error icon\r\n  errorBase64Icon = errorBase64Data;\r\n\r\n  imageDefs: { x: number, y: number, h: number, w: number, rx: number } = {\r\n    x: -20, y: -15, h: 60, w: 60, rx: 6\r\n  }\r\n\r\n  transitionDuration: number = 500;\r\n\r\n  protected addImage() {\r\n\r\n  }\r\n\r\n  drawNodes(\r\n    prGroup: d3.Selection<SVGGElement, d3.HierarchyPointNode<ID3Node>, any, any>\r\n  ) {\r\n    const me = this;\r\n    prGroup.each((d, i) => me.drawNode(d, i, prGroup));\r\n  }\r\n\r\n  drawNode(prData: d3.HierarchyPointNode<ID3Node>, prIndex: number, node: d3.Selection<SVGGElement, d3.HierarchyPointNode<ID3Node>, any, any>) {\r\n    const me = this;\r\n    \r\n    // adding rect\r\n    node.append('rect').attr('class', 'node-rect')\r\n      .attr('width', me.width).attr('height', me.height)\r\n      .attr('stroke', 'blue').attr('stroke-width', 1)\r\n      .attr('fill', '#02B2AC').attr('rx', 12);\r\n\r\n    // adding title\r\n    node.append('text').text(d => d.data.title)\r\n      .attr('font-size', 15).attr('x', 50).attr('y', 25);\r\n\r\n    // adding description\r\n    node.append('text').text(d => d.data.description)\r\n      .attr('font-size', 10).attr('x', 50).attr('y', 45);\r\n    // prGroup.\r\n\r\n\r\n    if(prData.data.nodeImage) {\r\n      const defs = node.append('defs').append('pattern')\r\n        .attr('id', d => `img-${d.data.nodeId}`)\r\n        .attr('width', 1)\r\n        .attr('height', 1);\r\n      \r\n      let linkRef: string = ''\r\n      if(prData.data.nodeImage.url) linkRef = prData.data.nodeImage.url;\r\n      if(prData.data.nodeImage.icon) linkRef = prData.data.nodeImage.icon;\r\n      if(prData.data.nodeImage.base64) linkRef = `data:image/png;base64,${prData.data.nodeImage.base64}`;\r\n\r\n      const image = defs.append('image')\r\n        .attr('xlink:href', linkRef)\r\n        .attr('width', me.imageDefs.w)\r\n        .attr('height', me.imageDefs.h)\r\n        // .attr('viewbox', '0 0 100 100')\r\n\r\n      .attr('preserveAspectRatio', 'xMidYMin slice');\r\n      // adding image\r\n      node.append('rect').attr('class', 'node-image')\r\n      .attr('x', me.imageDefs.x).attr('y', me.imageDefs.y)\r\n      .attr('width', me.imageDefs.w).attr('height', me.imageDefs.h)\r\n      // .attr('stroke', 'blue').attr('stroke-width', 1)\r\n      .attr('fill', d => `url(#img-${d.data.nodeId})`).attr('rx', me.imageDefs.rx);\r\n    }\r\n  }\r\n\r\n  xxxdrawNodes(\r\n    prGroup: d3.Selection<SVGGElement, d3.HierarchyPointNode<ID3Node>, any, any>\r\n  ) {\r\n    const me = this;\r\n    prGroup\r\n      .append('defs')\r\n      .append('pattern')\r\n      .attr('id', d => `img-${d.data.nodeId}`)\r\n      .attr('width', 70)\r\n      .attr('height', 70)\r\n      .append('image')\r\n      .attr('xlink:href', d => d.data.nodeImage.url)\r\n      .attr('width', 70)\r\n      .attr('height', 70);\r\n\r\n    // adding rect\r\n    prGroup.append('rect').attr('class', 'node-rect')\r\n      .attr('width', me.width).attr('height', me.height)\r\n      .attr('stroke', 'blue').attr('stroke-width', 1)\r\n      .attr('fill', 'gray').attr('rx', 12);\r\n\r\n    // adding title\r\n    prGroup.append('text').text(d => d.data.title)\r\n      .attr('font-size', 10).attr('x', 70).attr('y', 25);\r\n\r\n    // adding description\r\n    prGroup.append('text').text(d => d.data.description)\r\n      .attr('font-size', 10).attr('x', 70).attr('y', 45);\r\n\r\n    // adding image\r\n    prGroup.append('rect').attr('class', 'node-image')\r\n      .attr('x', 5).attr('y', 10)\r\n      .attr('width', 50).attr('height', 50)\r\n      .attr('fill', d => `url(#img-${d.data.nodeId})`);\r\n    // prGroup.\r\n\r\n  }\r\n\r\n  updateNodes(prGroup: d3.Selection<SVGGElement, any, any, any>, prNodes: d3.HierarchyPointNode<ID3Node>[]) {\r\n    prGroup.select('rect.node-rect').attr('fill', 'black')\r\n    //  .each(d => {\r\n    //    console.log('argument: ', d);\r\n    //  })\r\n\r\n    //.data(prNodes).select('rect.node-rect')\r\n    //.attr('x', d => d.x)\r\n    //.attr('y', d => d.y);\r\n    // console.log('Updateing...:', prGroup)\r\n  }\r\n\r\n}","export const collapseBase64Data = ``;","export const errorBase64Data = ``;\r\n\r\n","//#region \r\n// Desarrollado en base a: \r\n//  https://bl.ocks.org/bumbeishvili/09a03b81ae788d2d14f750afe59eb7de\r\n//  https://github.com/bumbeishvili/d3-organization-chart\r\n//#endregion\r\nimport * as d3 from 'd3';\r\nimport { ID3Node } from '../interfaces';\r\nimport { Subject, fromEvent } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { D3NodeBasicParser } from './@items';\r\n\r\nexport interface ID3OrgChartOptions {\r\n  nodeParser?: D3NodeBasicParser;\r\n  data?: ID3Node[];\r\n  backgroundColor?: string;\r\n  defaultFont?: string;\r\n}\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class D3OrgChart {\r\n  //#region Default Options\r\n  protected options: ID3OrgChartOptions = {\r\n    backgroundColor: '#03A3C5',\r\n    nodeParser: new D3NodeBasicParser(),\r\n    data: [],\r\n    defaultFont: 'Tahoma'\r\n  }\r\n  //#endregion\r\n\r\n  //#region SVG compoennts\r\n  protected container: d3.Selection<HTMLElement, any, any, any>;\r\n  protected svg: d3.Selection<d3.BaseType, unknown, HTMLElement, unknown>;\r\n  protected chart: d3.Selection<any, any, any, any>;\r\n  protected centerG: d3.Selection<any, any, any, any>;\r\n  protected defs: d3.Selection<any, any, any, any>;\r\n\r\n  protected lastTransform: any;\r\n  //#endregion\r\n\r\n  //#region DATA\r\n  protected root: d3.HierarchyPointNode<ID3Node>;\r\n  protected allNodes: any;\r\n\r\n  protected _data: ID3Node[] = [];\r\n  get data(): ID3Node[] {\r\n    return this._data || [];\r\n  }\r\n\r\n  set data(data: ID3Node[]) {\r\n    this._data = data;\r\n    // this.render()\r\n  }\r\n  //#endregion\r\n\r\n  //#region  NODE PARSER\r\n  protected _nodeParser: D3NodeBasicParser;\r\n  get nodeParser(): D3NodeBasicParser {\r\n    return this._nodeParser;\r\n  }\r\n  set nodeParser(parser: D3NodeBasicParser) {\r\n    this._nodeParser = parser;\r\n    // this.render();\r\n  }\r\n  //#endregion\r\n\r\n  currentZoom: number = 1;\r\n  treemap: d3.TreeLayout<ID3Node>;\r\n\r\n  constructor(prContainer: HTMLElement, prOptions?: ID3OrgChartOptions) {\r\n    const me = this;\r\n\r\n    // init container\r\n    me.container = d3.select(prContainer);\r\n\r\n    //If Data argument passed - then set it\r\n    if (prOptions?.data) me._data = prOptions.data;\r\n\r\n    // setting parser\r\n    me._nodeParser = prOptions?.nodeParser || me.options.nodeParser;\r\n\r\n    // applying options\r\n    me.options = Object.assign(me.options, prOptions);\r\n\r\n    // monitor resize\r\n    fromEvent(window, 'resize')\r\n      .pipe(\r\n        debounceTime(300)\r\n      ).subscribe(\r\n        () => {\r\n          // HDC - VER this.prepareCanvas();\r\n          this.render();\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    const me = this;\r\n    // preparing svg\r\n    me.prepareCanvas();\r\n\r\n    // if no data then return\r\n    if (!me.data.length) return;\r\n\r\n    // preparing data\r\n    me.prepareData();\r\n\r\n    // showing nodes\r\n    me.showNodes();\r\n    return this;\r\n  }\r\n\r\n  // preparing canvas\r\n  protected prepareCanvas() {\r\n    const me = this;\r\n\r\n    //Drawing containers\r\n    const containerRect = me.container.node().getBoundingClientRect();\r\n    me.svg = me.container.selectAll('svg')\r\n      .data([{ id: 'svg' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter => enter\r\n          .append('svg')\r\n          .attr('class', 'svg-chart-container')\r\n          .attr('font-family', me.options.defaultFont)\r\n          .call(d3.zoom().on(\"zoom\", d => this.zoomed()))\r\n          .attr('cursor', 'move')\r\n          .style('background-color', me.options.backgroundColor),\r\n        update =>\r\n          update\r\n            .attr('width', containerRect.width)\r\n            .attr('height', containerRect.height)\r\n      );\r\n    //Add container g element\r\n    me.chart = me.svg.selectAll('g.chart')\r\n      .data([{ id: 'chart' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter => enter\r\n          .append('g')\r\n          .attr('class', 'chart')\r\n          .attr('transform', `translate(0,0)`),\r\n        update => update\r\n      )\r\n\r\n    // Add one more container g element, for better positioning controls\r\n    me.centerG = me.chart.selectAll('g.center-group')\r\n      .data([{ id: 'center-group' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter => enter.append('g')\r\n          .attr('class', 'center-group'),\r\n        update =>\r\n          update\r\n            .attr('transform', `translate(${containerRect.width / 2},${this.nodeParser.height}) scale(${this.currentZoom})`)\r\n      )\r\n\r\n    // defs\r\n    me.defs = me.svg.selectAll('defs.globalDefs')\r\n      .data([{ id: 'defs' }], (d: { id: string }) => d.id)\r\n      .join(\r\n        enter => {\r\n          const defs = enter.append('defs').attr('class', 'globalDefs');\r\n          defs.append('pattern')\r\n            .attr('id', `img-expand`)\r\n            .attr('width', 1).attr('height', 1)\r\n            .append('image')\r\n            .attr(\"xlink:href\", \"data:image/png;base64,\" + me.nodeParser.expandBase64Icon)\r\n            .attr('width', 30)\r\n            .attr('height', 30)\r\n            .attr('preserveAspectRatio', 'xMidYMin slice');\r\n          defs.append('pattern')\r\n            .attr('id', `img-collapse`)\r\n            .attr('width', 1).attr('height', 1)\r\n            .append('image')\r\n            .attr(\"xlink:href\", \"data:image/png;base64,\" + me.nodeParser.collapseBase64Icon)\r\n            .attr('width', 30)\r\n            .attr('height', 30)\r\n            .attr('preserveAspectRatio', 'xMidYMin slice');\r\n          // defs.append('pattern')\r\n          //   .attr('id', `img-error`)\r\n          //   .attr('width', 1).attr('height', 1)\r\n          //   .append('image')\r\n          //   .attr(\"xlink:href\", \"data:image/png;base64,\" + me.nodeParser.errorBase64Icon)\r\n          //   .attr('width', me.nodeParser.imageDefs.w )\r\n          //   .attr('height', me.nodeParser.imageDefs.h)\r\n          //   .attr('preserveAspectRatio', 'xMidYMin slice');            \r\n          return defs\r\n        },\r\n        update => update\r\n      )\r\n  }\r\n\r\n  // preparing data\r\n  protected prepareData() {\r\n    const me = this;\r\n\r\n    // if no data return \r\n    if (!me.data.length) return;\r\n\r\n    // Convert flat data to hierarchical\r\n    if (!me.root) {\r\n      try { // preventing multiple root\r\n        me.root = d3.stratify<ID3Node>().id(({ nodeId }) => nodeId).parentId(({ parentNodeId }) => parentNodeId)\r\n        (me.data) as d3.HierarchyPointNode<ID3Node>;\r\n      } catch( err ) {\r\n        me.root = d3.stratify<ID3Node>().id(({ nodeId }) => nodeId).parentId(({ parentNodeId }) => parentNodeId)\r\n        ([{ \r\n          nodeId: 'root', \r\n          parentNodeId: '', \r\n          title: 'Error', \r\n          description: err.message || err,\r\n          nodeImage: {\r\n            base64: me.nodeParser.errorBase64Icon\r\n          }  \r\n        }]) as d3.HierarchyPointNode<ID3Node>;\r\n      }\r\n    }\r\n\r\n    // preparing treemap\r\n    const containerRect = me.container.node().getBoundingClientRect();\r\n    me.treemap = d3.tree<ID3Node>().size([containerRect.width || 250, containerRect.height])\r\n      .nodeSize([this.nodeParser.width + this.nodeParser.width / 2, this.nodeParser.height + this.nodeParser.height / 1.2]);\r\n\r\n    me.allNodes = me.treemap(me.root).descendants();\r\n    me.checkExpanded(me.root);\r\n  }\r\n\r\n  // showing nodes\r\n  protected showNodes(prNode: d3.HierarchyPointNode<ID3Node> = null) {\r\n    const me = this;\r\n\r\n    if (!prNode) prNode = me.root;\r\n    const updatePosition: { x: number, y: number } = {\r\n      x: prNode.x,\r\n      y: prNode.y\r\n    }\r\n\r\n    //  Assigns the x and y position for the nodes\r\n    const treeData = me.treemap(me.root);\r\n    // it is necesary for scope \r\n    const drawNodes = (container) => me.nodeParser.drawNodes(container);\r\n    const drawCollapser = (nodeGroup: d3.Selection<SVGGElement, d3.HierarchyPointNode<ID3Node>, any, any>) => {\r\n      nodeGroup.each((d, i) => {\r\n        // adding collapse / expand button\r\n        nodeGroup.append('circle')\r\n          .attr('class', 'collapser')\r\n          .attr('cx', me.nodeParser.width / 2)\r\n          .attr('cy', me.nodeParser.height)\r\n          .attr('r', 15)\r\n          .attr('stroke', 'black')\r\n          .attr('stroke-width', 2)\r\n          .on('click', (node) => {\r\n            me.expand(node, true);\r\n          });\r\n      });\r\n    };\r\n\r\n    const nodes = treeData.descendants();\r\n\r\n    // rendering nodes\r\n\r\n    const nodeStartPosition = (d: d3.HierarchyPointNode<ID3Node>) => {\r\n      if (prNode) {\r\n        return `translate(${updatePosition.x - (me.nodeParser.width / 2)},${updatePosition.y})`\r\n      }\r\n      if (!d.parent) return `translate(${d.x - (me.nodeParser.width / 2)},${d.y})`;\r\n      return `translate(${d.parent.x - (me.nodeParser.width / 2)},${d.parent.y})`\r\n    }\r\n\r\n    const nodePosition = (params: { x: number, y: number }) =>\r\n      `translate(${params.x - (me.nodeParser.width / 2)},${params.y})`;\r\n\r\n    const expandIconVisible =\r\n      (d: d3.HierarchyPointNode<ID3Node> & { _children?: any }) => (d.children || d._children) ? 'visible' : 'hidden';\r\n    const expandIcon =\r\n      (d: d3.HierarchyPointNode<ID3Node> & { _children?: any }) => expandIconVisible(d) == 'visible' ? (d.data.expanded ? `url(#img-collapse)` : `url(#img-expand)`) : '';\r\n\r\n\r\n    me.centerG.selectAll('g.node')\r\n      .data(nodes, (d: d3.HierarchyPointNode<ID3Node>) => d.data.nodeId)\r\n      .join(\r\n        enter =>\r\n          enter.append('g')\r\n            .style(\"opacity\", 0)\r\n            .attr('class', 'node')\r\n            .attr('cursor', 'pointer')\r\n            .attr('transform', nodeStartPosition)\r\n            .call(drawNodes)\r\n            .call(drawCollapser)\r\n            .on('click', (node) => {\r\n              me.onNodeClick.next({ id: node.data.nodeId, node: node.data });\r\n            }),\r\n        update => update,\r\n        exit =>\r\n          exit\r\n            .transition()\r\n            .duration(me.nodeParser.transitionDuration)\r\n            .attr('transform', nodePosition(prNode))\r\n            .style(\"opacity\", 0)\r\n            .remove()\r\n      )\r\n      .transition().duration(me.nodeParser.transitionDuration)\r\n      .style(\"opacity\", 1)\r\n      .attr('transform', nodePosition)\r\n      .selectAll('circle.collapser')\r\n      .attr('visibility', expandIconVisible)\r\n      .attr('fill', expandIcon)\r\n\r\n    // rendering links\r\n    const pathStartingDiagonal = (params: { x: number, y: number }) => {\r\n      const target = { x: params.x, y: params.y + me.nodeParser.height };\r\n      return this.linkPath(target, target)\r\n    }\r\n\r\n    const pathDiagonal = (d: d3.HierarchyPointNode<ID3Node>) => {\r\n      const target = { x: d.parent.x, y: d.parent.y + me.nodeParser.height };\r\n      return this.linkPath(d, target)\r\n    }\r\n\r\n    me.centerG.selectAll('path.link')\r\n      .data(nodes.slice(1), (d: d3.HierarchyPointNode<ID3Node>) => d.data.nodeId)\r\n      .join(\r\n        enter =>\r\n          enter\r\n            .insert('path', 'g')\r\n            .attr('class', 'link')\r\n            .attr('fill', 'none')\r\n            .attr('stroke', 'blue')\r\n            .attr('stroke-width', 2)\r\n            .attr('d', pathStartingDiagonal({ x: updatePosition.x, y: updatePosition.y })),\r\n        update => update,\r\n        exit =>\r\n          exit\r\n            .transition().duration(me.nodeParser.transitionDuration)\r\n            .attr('d', pathStartingDiagonal(prNode))\r\n            .remove()\r\n      )\r\n      .transition().duration(me.nodeParser.transitionDuration)\r\n      .attr('d', pathDiagonal);\r\n  }\r\n\r\n  // Zoom handler function\r\n  zoomed() {\r\n    const me = this;\r\n    // Saving d3 event's transform object\r\n    me.lastTransform = d3.event.transform;\r\n    // Reposition and rescale chart accordingly\r\n    me.chart.attr('transform', me.lastTransform);\r\n  }\r\n  //#region Events\r\n  // node click\r\n  onNodeClick: Subject<{ id: string, node: ID3Node }> = new Subject();\r\n  protected _onNodeClick(nodeId: string, node: ID3Node) {\r\n    this.onNodeClick.next({ id: nodeId, node: node });\r\n  }\r\n  //#endregion\r\n\r\n  //drawNode(prNode: d3.HierarchyPointNode<ID3Node>) {\r\n  //  const me = this;\r\n  //  me.nodeParser.draw(me.centerG, prNode);\r\n  //}\r\n\r\n\r\n  // Generate custom diagonal - play with it here - https://observablehq.com/@bumbeishvili/curved-edges?collection=@bumbeishvili/work-components\r\n  linkPath(source: { x: number, y: number }, target: { x: number, y: number }) {\r\n\r\n    // Calculate some variables based on source and target (s,t) coordinates\r\n    const x = source.x;\r\n    const y = source.y;\r\n    const ex = target.x;\r\n    const ey = target.y\r\n      ;\r\n    let xrvs = ex - x < 0 ? -1 : 1;\r\n    let yrvs = ey - y < 0 ? -1 : 1;\r\n    let rdef = 35;\r\n    let rInitial = Math.abs(ex - x) / 2 < rdef ? Math.abs(ex - x) / 2 : rdef;\r\n    let r = Math.abs(ey - y) / 2 < rInitial ? Math.abs(ey - y) / 2 : rInitial;\r\n    let h = Math.abs(ey - y) / 2 - r;\r\n    let w = Math.abs(ex - x) - r * 2;\r\n\r\n    // Build the path\r\n    const path = `\r\n            M ${x} ${y}\r\n            L ${x} ${y + h * yrvs}\r\n            C  ${x} ${y + h * yrvs + r * yrvs} ${x} ${y + h * yrvs + r * yrvs} ${x + r * xrvs} ${y + h * yrvs + r * yrvs}\r\n            L ${x + w * xrvs + r * xrvs} ${y + h * yrvs + r * yrvs}\r\n            C ${ex}  ${y + h * yrvs + r * yrvs} ${ex}  ${y + h * yrvs + r * yrvs} ${ex} ${ey - h * yrvs}\r\n            L ${ex} ${ey}\r\n          `\r\n    // Return result\r\n    return path;\r\n  }\r\n\r\n  checkExpanded(node: d3.HierarchyPointNode<ID3Node> & { _children?: any }) {\r\n    const me = this;\r\n\r\n    // checking expanded\r\n    if (node.data.expanded) {\r\n      if (!node.children && node._children) {\r\n        node.children = node._children;\r\n        node._children = null;\r\n      }\r\n    } else { // collapsed\r\n      if (node.children) {\r\n        node._children = node.children;\r\n        node.children = null;\r\n      }\r\n    }\r\n    // checking children\r\n    (node.children || node._children || []).forEach(current => me.checkExpanded(current))\r\n  }\r\n\r\n\r\n\r\n  expand(node: d3.HierarchyPointNode<ID3Node> & { _children?: any }, toggle: boolean = false) { //,  render: boolean = false) {\r\n    const me = this;\r\n\r\n    // if toggle - lets toggle\r\n    if (toggle) node.data.expanded = !node.data.expanded;\r\n\r\n    // checking expanded\r\n    if (node.data.expanded) {\r\n      if (!node.children && node._children) {\r\n        node.children = node._children;\r\n        node._children = null;\r\n      }\r\n    } else { // collapsed\r\n      if (node.children) {\r\n        node._children = node.children;\r\n        node.children = null;\r\n      }\r\n    }\r\n\r\n    // const expanded = node.data.expanded;\r\n    // node.data.expanded = !expanded;\r\n    // console.log('Expandind: ', node.data.nodeId)\r\n\r\n    // const expand = (children: d3.HierarchyPointNode<ID3Node>[], expanded: boolean) => {\r\n    //   (children || []).forEach(current => {\r\n    //       current.data.hidden = !expanded;\r\n    //       expand(current.children, expanded); \r\n    //     });\r\n    // }\r\n\r\n    // expand(node.children, node.data.expanded); \r\n    if (toggle) me.showNodes(node);\r\n  }\r\n\r\n}\r\n\r\n","import { Component, ElementRef, OnInit, ViewChildren, TemplateRef, QueryList, AfterViewInit, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { D3OrgChart, ID3OrgChartOptions } from '../../clasess/d3-org-chart.class';\r\nimport { ID3Node } from '../../interfaces';\r\nimport { D3NodeBasicParser } from './../../clasess/@items';\r\n\r\n@Component({\r\n    selector: 'be-d3-orgchart',\r\n    templateUrl: './be-d3-orgchart.component.html',\r\n    styleUrls: ['./be-d3-orgchart.component.scss']\r\n})\r\nexport class BED3OrgchartComponent implements AfterViewInit, OnChanges {\r\n    @Input() nodes: ID3Node[];\r\n    @Input() nodeParser: D3NodeBasicParser;\r\n\r\n    //#region Chart\r\n    protected _chart: D3OrgChart;\r\n    get chart(): D3OrgChart {\r\n        const me = this;\r\n        if (!me._chart) {\r\n            const options: ID3OrgChartOptions = {};\r\n            // adding nodes if defined\r\n            if (me.nodes) options.data = me.nodes;\r\n            // adding node parser if defined\r\n            if (me.nodeParser) options.nodeParser = me.nodeParser;\r\n\r\n            me._chart = new D3OrgChart(this.prEl.nativeElement, options);\r\n        };\r\n        return me._chart;\r\n    }\r\n    //#endregion\r\n\r\n    constructor(protected prEl: ElementRef) { }\r\n\r\n    ngAfterViewInit() {\r\n        this.init()\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const me = this;\r\n\r\n        // detecting changes of input\r\n        if (changes.nodeParser && changes.nodeParser.currentValue) {\r\n            me.assignNodeParser(changes.nodeParser.currentValue);\r\n            me.chart.render();\r\n        }\r\n\r\n        if (changes.nodes && changes.nodes.currentValue) {\r\n            me.assignData(changes.nodes.currentValue as ID3Node[]);\r\n            me.chart.render();\r\n        }\r\n\r\n    }\r\n\r\n    init() {\r\n        const me = this;\r\n        // init the canvas\r\n        const chart = me.chart; // Must be like this to ensure chart init\r\n        me.chart.render();\r\n        // setting data\r\n        me.chart.onNodeClick.subscribe(\r\n            (data: { id: string, node: ID3Node }) => {\r\n                console.log('Clicked: ', data)\r\n            }\r\n        )\r\n    }\r\n\r\n    assignData(data: ID3Node[] | ID3Node, clear: boolean = true) {\r\n        const me = this;\r\n        const chart = me.chart; // Must be like this to ensure chart init\r\n        // if isn´t array we convert it in array\r\n        if (!(data instanceof Array)) data = [data];\r\n        if (clear) {\r\n            chart.data = data;\r\n            return;\r\n        }\r\n        // pushing data\r\n        chart.data = [...chart.data, ...data];\r\n        chart.render();\r\n    }\r\n\r\n    assignNodeParser(prParser: D3NodeBasicParser) {\r\n        const me = this;\r\n        const chart = me.chart; // Must be like this to ensure chart init\r\n        chart.nodeParser = prParser;\r\n        chart.render();\r\n    }\r\n\r\n\r\n    //#region Para Eliminar\r\n    // xxxinit() {\r\n    //     const me = this;\r\n    //     // Obtenemos la info\r\n    //     d3\r\n    //         .json('https://gist.githubusercontent.com/bumbeishvili/dc0d47bc95ef359fdc75b63cd65edaf2/raw/c33a3a1ef4ba927e3e92b81600c8c6ada345c64b/orgChart.json')\r\n    //         .then((data: ID3Node[]) => {\r\n\r\n    //             // data.forEach(current => { current.expanded = true; })\r\n    //             console.log('Adding data: ')\r\n    //             me.chart = new D3OrgChart(this.prEl.nativeElement, data);\r\n    //             me.chart.render();\r\n\r\n    //             me.chart.onNodeClick.subscribe(\r\n    //                 (data: { id: string, node: ID3Node }) => {\r\n    //                     console.log('Clicked: ', data)\r\n    //                 }\r\n    //             )\r\n    //         });\r\n\r\n    //     // me.chart = new D3OrgChart(this.prEl.nativeElement);\r\n    //     // me.chart.render();\r\n\r\n    //     // me.chart.onNodeClick.subscribe(\r\n    //     //     (data: { id: string, node: ID3Node }) => {\r\n    //     //         console.log('Clicked: ', data)\r\n    //     //     }\r\n    //     // )\r\n    // }\r\n    //#endregion\r\n\r\n\r\n\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { BED3OrgchartComponent } from './components/orgchart/be-d3-orgchart.component';\r\n\r\n@NgModule({\r\n  declarations: [BED3OrgchartComponent],\r\n  imports: [\r\n  ],\r\n  exports: [BED3OrgchartComponent]\r\n})\r\nexport class BED3OrgchartModule { } \r\n"]}