// getting base64 icons
import { errorBase64Data } from './../../../assets/icons/error.base64';
var D3NodeBasicParser = /** @class */ (function () {
    function D3NodeBasicParser() {
        // dimensions
        this.width = 240;
        this.height = 100;
        this.defaultImage = {
            type: 'link',
            data: "https://raw.githubusercontent.com/hdcolelia/be-orgchart/master/src/lib/assets/images/root.png"
        };
        // error icon
        this.errorBase64Icon = errorBase64Data;
        this.imageDefs = {
            x: -20, y: -15, h: 60, w: 60, rx: 60
        };
        this.transitionDuration = 600;
    }
    D3NodeBasicParser.prototype.addImage = function () {
    };
    D3NodeBasicParser.prototype.drawNodes = function (prGroup, prClickEvent) {
        var me = this;
        // adding rect
        prGroup.append('rect').attr('class', 'node-rect')
            .attr('width', me.width).attr('height', me.height)
            .attr('stroke', 'blue').attr('stroke-width', 1)
            .attr('fill', '#02B2AC').attr('rx', 12)
            .on('click', function (node) {
            prClickEvent.next({ id: node.data.nodeId, node: node.data });
        });
        // adding title
        prGroup.append('text').append('tspan').text(function (d) { return d.data.title; })
            .attr('font-size', 15).attr('x', 50).attr('y', 25);
        // adding description
        prGroup.append('text').append('tspan').text(function (d) { return d.data.description; })
            .attr('font-size', 10).attr('x', 50).attr('y', 45);
        // adding description
        prGroup.append('text').text(function (d) { return d.data.nodeId; })
            .attr('font-size', 10).attr('x', 50).attr('y', 65);
        // adding image
        var imageUrl = function (d) {
            if (d.data.nodeImage)
                return "url(#img-" + d.data.nodeId + ")";
            if (me.defaultImage)
                return "url(#img-default-node-img)";
            return '';
        };
        prGroup.filter(function (d) { return imageUrl(d) != ''; })
            .append('rect').attr('class', 'node-image')
            .attr('x', me.imageDefs.x).attr('y', me.imageDefs.y)
            .attr('width', me.imageDefs.w).attr('height', me.imageDefs.h)
            .attr('fill', function (d) { return imageUrl(d); }).attr('rx', me.imageDefs.rx)
            .on('click', function (node) {
            prClickEvent.next({ id: node.data.nodeId, node: node.data });
        });
    };
    return D3NodeBasicParser;
}());
export { D3NodeBasicParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1iYXNpYy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2JlLW9yZ2NoYXJ0LyIsInNvdXJjZXMiOlsibGliL2NsYXNlc3MvQGl0ZW1zL2Jhc2ljL25vZGUtYmFzaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsdUJBQXVCO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUd2RTtJQUNFO1FBQ0EsYUFBYTtRQUNiLFVBQUssR0FBVyxHQUFHLENBQUM7UUFDcEIsV0FBTSxHQUFXLEdBQUcsQ0FBQztRQUVyQixpQkFBWSxHQUFlO1lBQ3pCLElBQUksRUFBRSxNQUFNO1lBQ1osSUFBSSxFQUFFLCtGQUErRjtTQUN0RyxDQUFBO1FBRUQsYUFBYTtRQUNiLG9CQUFlLEdBQUcsZUFBZSxDQUFDO1FBRWxDLGNBQVMsR0FBK0Q7WUFDdEUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7U0FDckMsQ0FBQTtRQUVELHVCQUFrQixHQUFXLEdBQUcsQ0FBQztJQWpCakIsQ0FBQztJQW1CUCxvQ0FBUSxHQUFsQjtJQUVBLENBQUM7SUFFRCxxQ0FBUyxHQUFULFVBQ0UsT0FBNEUsRUFDNUUsWUFBb0Q7UUFFcEQsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRWhCLGNBQWM7UUFDZCxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDO2FBQzlDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQzthQUNqRCxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO2FB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QyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFSCx3QkFBQztBQUFELENBQUMsQUFsRUQsSUFrRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XHJcbmltcG9ydCB7IElEM05vZGUsIElJbWFnZURlZiB9IGZyb20gJy4vLi4vLi4vLi4vaW50ZXJmYWNlcyc7XHJcblxyXG4vLyBnZXR0aW5nIGJhc2U2NCBpY29uc1xyXG5pbXBvcnQgeyBlcnJvckJhc2U2NERhdGEgfSBmcm9tICcuLy4uLy4uLy4uL2Fzc2V0cy9pY29ucy9lcnJvci5iYXNlNjQnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRDNOb2RlQmFzaWNQYXJzZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcbiAgLy8gZGltZW5zaW9uc1xyXG4gIHdpZHRoOiBudW1iZXIgPSAyNDA7XHJcbiAgaGVpZ2h0OiBudW1iZXIgPSAxMDA7XHJcblxyXG4gIGRlZmF1bHRJbWFnZT86IElJbWFnZURlZiA9IHtcclxuICAgIHR5cGU6ICdsaW5rJyxcclxuICAgIGRhdGE6IFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2hkY29sZWxpYS9iZS1vcmdjaGFydC9tYXN0ZXIvc3JjL2xpYi9hc3NldHMvaW1hZ2VzL3Jvb3QucG5nXCJcclxuICB9XHJcblxyXG4gIC8vIGVycm9yIGljb25cclxuICBlcnJvckJhc2U2NEljb24gPSBlcnJvckJhc2U2NERhdGE7XHJcblxyXG4gIGltYWdlRGVmczogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgaDogbnVtYmVyLCB3OiBudW1iZXIsIHJ4OiBudW1iZXIgfSA9IHtcclxuICAgIHg6IC0yMCwgeTogLTE1LCBoOiA2MCwgdzogNjAsIHJ4OiA2MFxyXG4gIH1cclxuXHJcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBudW1iZXIgPSA2MDA7XHJcblxyXG4gIHByb3RlY3RlZCBhZGRJbWFnZSgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBkcmF3Tm9kZXMoXHJcbiAgICBwckdyb3VwOiBkMy5TZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGQzLkhpZXJhcmNoeVBvaW50Tm9kZTxJRDNOb2RlPiwgYW55LCBhbnk+LFxyXG4gICAgcHJDbGlja0V2ZW50OiBTdWJqZWN0PHsgaWQ6IHN0cmluZywgbm9kZTogSUQzTm9kZSB9PlxyXG4gICkge1xyXG4gICAgY29uc3QgbWUgPSB0aGlzO1xyXG5cclxuICAgIC8vIGFkZGluZyByZWN0XHJcbiAgICBwckdyb3VwLmFwcGVuZCgncmVjdCcpLmF0dHIoJ2NsYXNzJywgJ25vZGUtcmVjdCcpXHJcbiAgICAgIC5hdHRyKCd3aWR0aCcsIG1lLndpZHRoKS5hdHRyKCdoZWlnaHQnLCBtZS5oZWlnaHQpXHJcbiAgICAgIC5hdHRyKCdzdHJva2UnLCAnYmx1ZScpLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDEpXHJcbiAgICAgIC5hdHRyKCdmaWxsJywgJyMwMkIyQUMnKS5hdHRyKCdyeCcsIDEyKVxyXG4gICAgICAub24oJ2NsaWNrJywgKG5vZGUpID0+IHtcclxuICAgICAgICBwckNsaWNrRXZlbnQubmV4dCh7IGlkOiBub2RlLmRhdGEubm9kZUlkLCBub2RlOiBub2RlLmRhdGEgfSk7XHJcbiAgICAgIH0pXHJcblxyXG4gICAgLy8gYWRkaW5nIHRpdGxlXHJcbiAgICBwckdyb3VwLmFwcGVuZCgndGV4dCcpLmFwcGVuZCgndHNwYW4nKS50ZXh0KGQgPT4gZC5kYXRhLnRpdGxlKVxyXG4gICAgICAuYXR0cignZm9udC1zaXplJywgMTUpLmF0dHIoJ3gnLCA1MCkuYXR0cigneScsIDI1KTtcclxuXHJcbiAgICAvLyBhZGRpbmcgZGVzY3JpcHRpb25cclxuICAgIHByR3JvdXAuYXBwZW5kKCd0ZXh0JykuYXBwZW5kKCd0c3BhbicpLnRleHQoZCA9PiBkLmRhdGEuZGVzY3JpcHRpb24pXHJcbiAgICAgIC5hdHRyKCdmb250LXNpemUnLCAxMCkuYXR0cigneCcsIDUwKS5hdHRyKCd5JywgNDUpO1xyXG4gICAgLy8gYWRkaW5nIGRlc2NyaXB0aW9uXHJcbiAgICBwckdyb3VwLmFwcGVuZCgndGV4dCcpLnRleHQoZCA9PiBkLmRhdGEubm9kZUlkKVxyXG4gICAgICAuYXR0cignZm9udC1zaXplJywgMTApLmF0dHIoJ3gnLCA1MCkuYXR0cigneScsIDY1KTtcclxuXHJcbiAgICAvLyBhZGRpbmcgaW1hZ2VcclxuICAgIGNvbnN0IGltYWdlVXJsID0gKGQ6IGQzLkhpZXJhcmNoeVBvaW50Tm9kZTxJRDNOb2RlPikgPT4ge1xyXG4gICAgICBpZiAoZC5kYXRhLm5vZGVJbWFnZSkgcmV0dXJuIGB1cmwoI2ltZy0ke2QuZGF0YS5ub2RlSWR9KWA7XHJcbiAgICAgIGlmIChtZS5kZWZhdWx0SW1hZ2UpIHJldHVybiBgdXJsKCNpbWctZGVmYXVsdC1ub2RlLWltZylgO1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICBwckdyb3VwLmZpbHRlcihkID0+IGltYWdlVXJsKGQpICE9ICcnKVxyXG4gICAgICAuYXBwZW5kKCdyZWN0JykuYXR0cignY2xhc3MnLCAnbm9kZS1pbWFnZScpXHJcbiAgICAgIC5hdHRyKCd4JywgbWUuaW1hZ2VEZWZzLngpLmF0dHIoJ3knLCBtZS5pbWFnZURlZnMueSlcclxuICAgICAgLmF0dHIoJ3dpZHRoJywgbWUuaW1hZ2VEZWZzLncpLmF0dHIoJ2hlaWdodCcsIG1lLmltYWdlRGVmcy5oKVxyXG4gICAgICAuYXR0cignZmlsbCcsIGQgPT4gaW1hZ2VVcmwoZCkpLmF0dHIoJ3J4JywgbWUuaW1hZ2VEZWZzLnJ4KVxyXG4gICAgICAub24oJ2NsaWNrJywgKG5vZGUpID0+IHtcclxuICAgICAgICBwckNsaWNrRXZlbnQubmV4dCh7IGlkOiBub2RlLmRhdGEubm9kZUlkLCBub2RlOiBub2RlLmRhdGEgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbn0iXX0=