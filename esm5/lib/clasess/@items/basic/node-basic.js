// getting base64 icons
import { expandBase64Data } from './../../../assets/icons/expand.base64';
import { collapseBase64Data } from './../../../assets/icons/collapse.base64';
import { errorBase64Data } from './../../../assets/icons/error.base64';
var D3NodeBasicParser = /** @class */ (function () {
    function D3NodeBasicParser() {
        // dimensions
        this.width = 220;
        this.height = 80;
        // expand / colapse icons
        this.expandBase64Icon = expandBase64Data;
        this.collapseBase64Icon = collapseBase64Data;
        // error icon
        this.errorBase64Icon = errorBase64Data;
        this.imageDefs = {
            x: -20, y: -15, h: 60, w: 60, rx: 6
        };
        this.transitionDuration = 500;
    }
    D3NodeBasicParser.prototype.addImage = function () {
    };
    D3NodeBasicParser.prototype.drawNodes = function (prGroup) {
        var me = this;
        // adding rect
        prGroup.append('rect').attr('class', 'node-rect')
            .attr('width', me.width).attr('height', me.height)
            .attr('stroke', 'blue').attr('stroke-width', 1)
            .attr('fill', '#02B2AC').attr('rx', 12);
        // adding title
        prGroup.append('text').text(function (d) { return d.data.title; })
            .attr('font-size', 15).attr('x', 50).attr('y', 25);
        // adding description
        prGroup.append('text').text(function (d) { return d.data.description; })
            .attr('font-size', 10).attr('x', 50).attr('y', 45);
        // prGroup.
        var imageData = function (d) {
            var linkRef = '';
            if (!d.data.nodeImage)
                return linkRef;
            if (d.data.nodeImage.url)
                linkRef = d.data.nodeImage.url;
            if (d.data.nodeImage.icon)
                linkRef = d.data.nodeImage.icon;
            if (d.data.nodeImage.base64)
                linkRef = "data:image/png;base64," + d.data.nodeImage.base64;
            return linkRef;
        };
        prGroup.filter(function (d) { return imageData(d) != ''; })
            .append('defs').append('pattern')
            .attr('id', function (d) { return "img-" + d.data.nodeId; })
            .attr('width', 1)
            .attr('height', 1)
            .append('image')
            .attr('xlink:href', function (d) { return imageData(d); })
            .attr('width', me.imageDefs.w)
            .attr('height', me.imageDefs.h)
            .attr('preserveAspectRatio', 'xMidYMin slice');
        // adding image
        prGroup.filter(function (d) { return imageData(d) != ''; })
            .append('rect').attr('class', 'node-image')
            .attr('x', me.imageDefs.x).attr('y', me.imageDefs.y)
            .attr('width', me.imageDefs.w).attr('height', me.imageDefs.h)
            // .attr('stroke', 'blue').attr('stroke-width', 1)
            .attr('fill', function (d) { return "url(#img-" + d.data.nodeId + ")"; }).attr('rx', me.imageDefs.rx);
        // prGroup.each((d, i) => me.drawNode(d, i, prGroup));
    };
    D3NodeBasicParser.prototype.drawNode = function (prData, prIndex, node) {
        var me = this;
        // adding rect
        console.log('Node: ', node.property('class'));
        node.append('rect').attr('class', 'node-rect')
            .attr('width', me.width).attr('height', me.height)
            .attr('stroke', 'blue').attr('stroke-width', 1)
            .attr('fill', '#02B2AC').attr('rx', 12);
        console.log('Adding text : ', prData.data.nodeId);
        // adding title
        node.append('text').text(function (d) { return d.data.title; })
            .attr('font-size', 15).attr('x', 50).attr('y', 25);
        // adding description
        node.append('text').text(function (d) { return d.data.description; })
            .attr('font-size', 10).attr('x', 50).attr('y', 45);
        // prGroup.
        if (prData.data.nodeImage) {
            var defs = node.append('defs').append('pattern')
                .attr('id', function (d) { return "img-" + d.data.nodeId; })
                .attr('width', 1)
                .attr('height', 1);
            var linkRef = '';
            if (prData.data.nodeImage.url)
                linkRef = prData.data.nodeImage.url;
            if (prData.data.nodeImage.icon)
                linkRef = prData.data.nodeImage.icon;
            if (prData.data.nodeImage.base64)
                linkRef = "data:image/png;base64," + prData.data.nodeImage.base64;
            var image = defs.append('image')
                .attr('xlink:href', linkRef)
                .attr('width', me.imageDefs.w)
                .attr('height', me.imageDefs.h)
                // .attr('viewbox', '0 0 100 100')
                .attr('preserveAspectRatio', 'xMidYMin slice');
            // adding image
            node.append('rect').attr('class', 'node-image')
                .attr('x', me.imageDefs.x).attr('y', me.imageDefs.y)
                .attr('width', me.imageDefs.w).attr('height', me.imageDefs.h)
                // .attr('stroke', 'blue').attr('stroke-width', 1)
                .attr('fill', function (d) { return "url(#img-" + d.data.nodeId + ")"; }).attr('rx', me.imageDefs.rx);
        }
    };
    D3NodeBasicParser.prototype.xxxdrawNodes = function (prGroup) {
        var me = this;
        prGroup
            .append('defs')
            .append('pattern')
            .attr('id', function (d) { return "img-" + d.data.nodeId; })
            .attr('width', 70)
            .attr('height', 70)
            .append('image')
            .attr('xlink:href', function (d) { return d.data.nodeImage.url; })
            .attr('width', 70)
            .attr('height', 70);
        // adding rect
        prGroup.append('rect').attr('class', 'node-rect')
            .attr('width', me.width).attr('height', me.height)
            .attr('stroke', 'blue').attr('stroke-width', 1)
            .attr('fill', 'gray').attr('rx', 12);
        // adding title
        prGroup.append('text').text(function (d) { return d.data.title; })
            .attr('font-size', 10).attr('x', 70).attr('y', 25);
        // adding description
        prGroup.append('text').text(function (d) { return d.data.description; })
            .attr('font-size', 10).attr('x', 70).attr('y', 45);
        // adding image
        prGroup.append('rect').attr('class', 'node-image')
            .attr('x', 5).attr('y', 10)
            .attr('width', 50).attr('height', 50)
            .attr('fill', function (d) { return "url(#img-" + d.data.nodeId + ")"; });
        // prGroup.
    };
    D3NodeBasicParser.prototype.updateNodes = function (prGroup, prNodes) {
        prGroup.select('rect.node-rect').attr('fill', 'black');
        //  .each(d => {
        //    console.log('argument: ', d);
        //  })
        //.data(prNodes).select('rect.node-rect')
        //.attr('x', d => d.x)
        //.attr('y', d => d.y);
        // console.log('Updateing...:', prGroup)
    };
    return D3NodeBasicParser;
}());
export { D3NodeBasicParser };
//# sourceMappingURL=data:application/json;base64,